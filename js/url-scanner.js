/**
* Copyright 2016 (c) D09r
* @author Dinesh Kumar https://www.linkedin.com/in/hack3r
* Repository: https://github.com/D09r/Malware-URL-Scanner
* 
*
*
*/

var req, urlDump;
var whoisUrl = "https://whois.domaintools.com/";
var extractURLsLookup = "https://api.hackertarget.com/pagelinks/?q=";
var httpHeadersLookup = "https://api.hackertarget.com/httpheaders/?q=";
var mcAfeeSiteAdvisor = "https://www.siteadvisor.com/sitereport.html?url=";
var nortonSafeWeb = "https://safeweb.norton.com/report/show?url=";
var trendMicro = "https://global.sitesafety.trendmicro.com/result.php";
var bitdefenderTL = "http://trafficlight.bitdefender.com/info?url=";
var avgThreatLabs = "http://www.avgthreatlabs.com/ww-en/website-safety-reports/domain/";
var wotScore = "https://www.mywot.com/en/scorecard/";
var phishTankLookup = "http://checkurl.phishtank.com/checkurl/";
var fortiGuardLookup = "http://www.fortiguard.com/webfilter?q=";


/**
* Whois Lookup
*
*/
function whois(url) {
    try {
        $.ajax({
            type: "GET",
            url: "http://api.hackertarget.com/whois/?q=" + url,
            success: function(data){
                var pre = document.createElement('pre');
                pre.setAttribute('style', 'border:1px black');
                pre.innerText = data;
                document.getElementById('whoisPre').appendChild(pre);
                $('#whoisLookup .info').empty();
                $('#whoisInput').prop('disabled',false);
                $('#whoisSubmit').prop('disabled',false);
                $('#whoisSubmit').text('Lookup!');
                $('body').animate({
                    scrollTop: $('#inputPane').offset().top-60
                }, 900);
            },
            dataType: "text",
            error: function() {
                console.log("Whois Lookup: ", err);
                $('#whoisLookup .info').empty();
                $('#whoisPre').empty();
                $('#whoisInput').prop('disabled',false);
                $('#whoisSubmit').prop('disabled',false);
                $('#whoisSubmit').text('Lookup!');
            }
        });
    }
    
    catch(err) {
        console.log("Whois Lookup: ", err);
    }
}

/**
* Reverse IP Lookup
*
*/
function revIP(url,ref) {
    try {
        $.ajax({
            type: "GET",
            url: "http://api.hackertarget.com/reverseiplookup/?q=" + url,
            success: function(data){
                if (ref == 'homepage') {
                    var pre = document.createElement('pre');
                    pre.setAttribute('style', 'border:1px black');
                    pre.innerText = data;
                    document.getElementById('revIPpre').appendChild(pre);
                    $('#reverseIPlookup .info').empty();
                    $('#revIPinput').prop('disabled',false);
                    $('#revIPsubmit').prop('disabled',false);
                    $('#revIPsubmit').text('Lookup!');
                    $('body').animate({
                        scrollTop: $('#inputPane').offset().top-60
                    }, 900);
                } else {
                    if (data == "API count exceeded" || data == "") {
                        //lookup limit reached
                        $('#navRIP').remove();
                        $('#reverseIP').remove();
                    } else {
                        var rIPPane = document.createElement('fieldset');
                        var rIPL = document.createElement('legend');
                        var pre = document.createElement('pre');
                        pre.setAttribute('style', 'border:1px black');
                        pre.innerText = data;

                        rIPL.innerText = "Reverse IP lookup";
                        rIPPane.appendChild(rIPL);
                        rIPPane.appendChild(pre);
                        document.getElementById('reverseIPwrap').appendChild(rIPPane);   
                    }
                }
            },
            dataType: "text",
            error: function() {
                console.log("Reverse IP Lookup: ", err);
                if (ref == 'homepage') {
                    $('#reverseIPlookup .info').empty();
                    $('#revIPinput').prop('disabled',false);
                    $('#revIPsubmit').prop('disabled',false);
                    $('#revIPsubmit').text('Lookup!');
                    $('#revIPpre').append("<span>Unable to connect! Please try again later.</span>");
                } else {
                    $('#reverseIPwrap').append("<span>Not found</span>");
                    $('#navRIP').css('display','none');
                    $('#reverseIP').css('display','none');
                }
            }
        });
    }
    
    catch(err) {
        console.log("Reverse IP Lookup: ", err);
    }
}

/**
* SSL Certificate Checker
*
*/
function extractFromDump(dump) {
    var info = [];
    var $doc=$(dump);
    var mainContent = $doc.find("div.mainContent")[0];
    var qus = $(mainContent).find(".qu");

    $(qus).each(function (index, qu) {
        if (index != 10 && index != 15) {
            var key = $.trim($(qu).parent().text());
            var value = $.trim($(qu).parent().parent().text());
            value = value.replace(/\s+/g, ' ');
            value = value.replace(key, "");
            info.push({key: key, value: value});
        }
    });

    var table = $("#sslTable");
//    $("#spinner").hide();
    info.forEach(function(i){
        var valueToBeAppended ='<tr><td>'+ i.key+'</td><td>'+ i.value+'</td></tr>';
        table.append($(valueToBeAppended));
    });
    $('#sslChecker .info').empty();
}

function sslChecker(url) {
    try {
        var SslCheckerForm = {
            "SslCheckerForm[url]": url,
            "SslCheckerForm[port]": 443,
            "yt0": ""
        };
        
        $.ajax({
            type: "POST",
            url: "https://www.sslchecker.com/sslchecker",
            data: SslCheckerForm,
            success: function(data){
                var parser = new DOMParser();
                var dump = parser.parseFromString(data, "text/html");
                extractFromDump(dump);
                $('#sslURLinput').prop('disabled',false);
                $('#sslURLsubmit').prop('disabled',false);
                $('#sslURLsubmit').text('SSL Check');
                $('body').animate({
                    scrollTop: $('#inputPane').offset().top-60
                }, 900);
            },
            dataType: "html",
            error: function() {
                console.log("SSL Check: ", err);
                $('#sslChecker .info').empty();
                $('#sslTable').empty();
                $('#sslChecker .info').append("<div class='alert alert-warning'><span class='glyphicon glyphicon-remove-sign'></span> Unable to connect.</div>");
                setTimeout(function(){ 
                    $('#sslChecker .info').empty();
                }, 2000);
                $('#sslURLinput').prop('disabled',false);
                $('#sslURLsubmit').prop('disabled',false);
                $('#sslURLsubmit').text('SSL Check');
            }
        });
        $('#sslChecker .info').empty();
    }
    
    catch(err) {
        console.log("SSL Check: ", err);
    }
}

/**
* getUrlParameter function
*
*/
var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : sParameterName[1];
        }
    }
};

/**
* HTTP Headers
*
*/
function httpHeaders(url, ref) {
    try {
        $.ajax({
            type: "GET",
            url: httpHeadersLookup + url,
            success: function(data){
                if (ref == 'homepage') {
                    var pre = document.createElement('pre');
                    pre.setAttribute('style', 'border:1px black');
                    pre.innerText = data;
                    document.getElementById('httpPre').appendChild(pre);
                    $('#httpHeadersLookup .info').empty();
                    $('#httpInput').prop('disabled',false);
                    $('#httpSubmit').prop('disabled',false);
                    $('#httpSubmit').text('Lookup!');
                    $('body').animate({
                        scrollTop: $('#inputPane').offset().top-60
                    }, 900);
                } else {
                    if (data == "API count exceeded" || data == "") {
                        //lookup limit reached
                        $('#navHeaders').remove();
                        $('#HTTP_headers').remove();
                    } else {
                        var httpHeadersPane = document.createElement('fieldset');
                        var legend = document.createElement('legend');
                        var pre = document.createElement('pre');
                        pre.setAttribute('style', 'border:1px black');
                        pre.innerText = data;
                        legend.innerText = "HTTP Headers";
                        httpHeadersPane.appendChild(legend);
                        httpHeadersPane.appendChild(pre);
                        document.getElementById('httpHeaders').appendChild(httpHeadersPane);   
                    }
                }
            },
            dataType: "text",
            error: function() {
                console.log("HTTP Headers: ", err);
                if (ref == 'homepage') {
                    $('#httpHeadersLookup .info').empty();
                    $('#httpInput').prop('disabled',false);
                    $('#httpSubmit').prop('disabled',false);
                    $('#httpSubmit').text('Lookup!');
                    $('#httpPre').append("<span>Unable to connect! Please try again later.</span>");
                } else {
                    $('#httpHeaders').append("<span>No results found</span>");
                    $('#navHeaders').css('display','none');
                    $('#HTTP_headers').css('display','none');
                }
            }
        });
    }
    
    catch(err) {
        console.log("Reverse IP Lookup: ", err);
    }
}

/**
* Extract URLs
*
*/
function extractURLs(url, ref) {
    try {
        $.ajax({
            type: "GET",
            url: extractURLsLookup + url,
            success: function(data){
                if (ref == 'homepage') {
                    var pre = document.createElement('pre');
                    pre.setAttribute('style', 'border:1px black');
                    pre.innerText = data;
                    document.getElementById('extractedPageLinksPre').appendChild(pre);
                    $('#extractedPageLinks .info').empty();
                    $('#extractedPageLinksInput').prop('disabled',false);
                    $('#extractedPageLinksSubmit').prop('disabled',false);
                    $('#extractedPageLinksSubmit').text('Lookup!');
                    $('body').animate({
                        scrollTop: $('#inputPane').offset().top-60
                    }, 900);
                } else {
                    if (data == "API count exceeded" || data == "") {
                        //lookup limit reached
                        $('#navExtractURLs').remove();
                        $('#extractedURLs').remove();
                    } else {
                        var extractedPane = document.createElement('fieldset');
                        var legend = document.createElement('legend');
                        var pre = document.createElement('pre');
                        pre.setAttribute('style', 'border:1px black');
                        pre.innerText = data;
                        legend.innerText = "Extracted URLs";
                        extractedPane.appendChild(legend);
                        extractedPane.appendChild(pre);
                        document.getElementById('extractedURLsWrap').appendChild(extractedPane);
                    }
                }
            },
            dataType: "text",
            error: function() {
                console.log("Extracted URLs: ", err);
                if (ref == 'homepage') {
                    $('#extractedPageLinks .info').empty();
                    $('#extractedPageLinksInput').prop('disabled',false);
                    $('#extractedPageLinksSubmit').prop('disabled',false);
                    $('#extractedPageLinksSubmit').text('Lookup!');
                    $('#extractedPageLinksPre').append("<span>Unable to connect! Please try again later.</span>");
                } else {
                    $('#navExtractURLs').css('display','none');
                    $('#extractedURLs').css('display','none');
                }
            }
        });
    }
    
    catch(err) {
        console.log("Extracted URLs: ", err);
    }    
}

/**
* DNS Lookup
*
*/
function dnsLookup (url) {
    try {
        $.ajax({
            type: "GET",
            url: "http://api.hackertarget.com/dnslookup/?q=" + url,
            success: function(data){
                if (data == "API count exceeded" || data == "") {
                    //lookup limit reached
                    $('#navDNS').remove();
                    $('#dnsLookup').remove();
                } else {
                    var dnsLookupPane = document.createElement('fieldset');
                    var dnsLookupL = document.createElement('legend');
                    var pre = document.createElement('pre');
                    pre.setAttribute('style', 'border:1px black');
                    pre.innerText = data;
                    dnsLookupL.innerText = "DNS Lookup";
                    dnsLookupPane.appendChild(dnsLookupL);
                    dnsLookupPane.appendChild(pre);
                    document.getElementById('dnsLookupwrap').appendChild(dnsLookupPane);   
                }
            },
            dataType: "text",
            error: function() {
                console.log("DNS Lookup: ", err);
                $('#navDNS').remove();
                $('#dnsLookup').remove();
            }
        });    
    }
    
    catch (err) {
        console.log("Error (DNS Lookup): ", err);
    }
}

/**
* Reverse DNS Lookup
*
*/
function reverseDNS (url) {
    try {
        $.ajax({
            type: "GET",
            url: "https://api.hackertarget.com/reversedns/?q=" + url,
            success: function(data){
                console.log(data);
                if (data == "API count exceeded" || data == "") {
                    //lookup limit reached
                    $('#navRDNS').remove();
                    $('#reverseDNS').remove();
                } else {
                    var reverseDNSPane = document.createElement('fieldset');
                    var reverseDNSL = document.createElement('legend');
                    var pre = document.createElement('pre');
                    pre.setAttribute('style', 'border:1px black');
                    pre.innerText = data;
                    reverseDNSL.innerText = "Reverse DNS Lookup";
                    reverseDNSPane.appendChild(reverseDNSL);
                    reverseDNSPane.appendChild(pre);
                    document.getElementById('reverseDNSwrap').appendChild(reverseDNSPane);   
                }
            },
            async: false,
            dataType: "text",
            error: function() {
                console.log("Reverse DNS Lookup: ", err);
                $('#navRDNS').remove();
                $('#reverseDNS').remove();
            }
        });    
    }
    
    catch (err) {
        console.log("Error (Reverse DNS Lookup): ", err);
    }
}

/**
* Webpage Screenshot
*
*/
function screenshot (url) {
	var req = new XMLHttpRequest();
	req.open('GET', "http://api.screenshots.com/v1/" + url + "/history/", false);
	req.send(null);
	if(req.status == 200 || req.readyState == 4) {
		
		try {
			var scr = JSON.parse(req.responseText);
			console.log(scr);
			if (scr.status == "success") {

				var scrPane = document.createElement('fieldset');
				var scrL = document.createElement('legend');
				var divCarousel = document.createElement('div');
				divCarousel.setAttribute('id','myCarousel');
				divCarousel.setAttribute('class','carousel slide');
				divCarousel.setAttribute('data-ride','carousel');

				var len = scr.historical.length;

				if (len > 20) {
					len = 20;
				}

				if (len != 0) {
					// Carousel Indicators (id = myCarousel)
					var ol = document.createElement('ol');
					ol.setAttribute('class','carousel-indicators');
					for (i = 0; i < len; i++) {
						var li = document.createElement('li');
						li.setAttribute('data-target','#myCarousel');
						li.setAttribute('data-slide-to', i);
						if (i == 0) {
							li.setAttribute('class', 'active');
						}
						ol.appendChild(li);
					}

					// Wrapper for slides (id = myCarousel)
					var divWrap = document.createElement('div');
					divWrap.setAttribute('class','carousel-inner');
					divWrap.setAttribute('role','listbox');

					for (i = 0; i < len; i++) {
						var divItem = document.createElement('div');
						if (i == 0) {
							divItem.setAttribute('class','item active');	
						} else {
							divItem.setAttribute('class','item');
						}
						var img = document.createElement('img');
						img.setAttribute('src', scr.historical[i].small);
						img.setAttribute('full', scr.historical[i].large);
						img.setAttribute('style', 'cursor:pointer; z-index: 1');
						img.setAttribute('title', 'click to enlarge the screenshot');
						
						var divCap = document.createElement('div');
						divCap.setAttribute('class','carousel-caption');
						var h3 = document.createElement('h3');
						h3.innerText = scr.historical[i].date;
						divCap.appendChild(h3);
						divItem.appendChild(img);
						
						
//						var enlar = document.createElement('div');
//						enlar.setAttribute('class','enlar');
//						var enlarSpan = document.createElement('span');
//						enlarSpan.setAttribute('class','glyphicon glyphicon-resize-full');
//						enlar.appendChild(enlarSpan);
//						img.appendChild(enlar);
						
						//						var enlar = document.createElement('div');
//						enlar.setAttribute('style', "position: absolute; top: 20px; left: 20; z-index: 1");
//						var enlarA = document.createElement('a');
//						enlarA.setAttribute('href','#');
//						enlarA.setAttribute('title','click to enlarge the screenshot');
//						var enlarSpan = document.createElement('span');
//						enlarSpan.setAttribute('class','glyphicon glyphicon-resize-full');
//						enlarA.appendChild(enlarSpan);
//						enlar.appendChild(enlarA);
//						divItem.appendChild(enlar);
						
						divItem.appendChild(divCap);
						divWrap.appendChild(divItem);
					}
				} else {
					document.getElementById('screenshot').style.display = "none";
					document.getElementById('webScrshoot').style.display = "none";
					document.getElementById('navScr').style.display = "none";
				}

				// Left and right controls (id = myCarousel)
				var aPrev = document.createElement('a');
				aPrev.setAttribute('class','left carousel-control');
				aPrev.setAttribute('href','#myCarousel');
				aPrev.setAttribute('role','button');
				aPrev.setAttribute('data-slide','prev');

				var spanL1 = document.createElement('span');
				var spanL2 = document.createElement('span');
				spanL1.setAttribute('class','glyphicon glyphicon-chevron-left');
				spanL1.setAttribute('aria-hidden','true');
				spanL2.setAttribute('class','sr-only');
				spanL2.innerText = "Previous";

				aPrev.appendChild(spanL1);
				aPrev.appendChild(spanL2);


				var aNext = document.createElement('a');
				aNext.setAttribute('class','right carousel-control');
				aNext.setAttribute('href','#myCarousel');
				aNext.setAttribute('role','button');
				aNext.setAttribute('data-slide','next');

				var spanR1 = document.createElement('span');
				var spanR2 = document.createElement('span');
				spanR1.setAttribute('class','glyphicon glyphicon-chevron-right');
				spanR1.setAttribute('aria-hidden','true');
				spanR2.setAttribute('class','sr-only');
				spanR2.innerText = "Next";

				aNext.appendChild(spanR1);
				aNext.appendChild(spanR2);

				var enlInfoIco = document.createElement('span');
				var enlInfo = document.createElement('span');
				enlInfoIco.setAttribute('class','glyphicon glyphicon-info-sign');
				enlInfoIco.setAttribute('id','enlInfoIco');
				enlInfo.innerText = "Click on screenshot to enlarge it";
				scrL.innerText = "Screenshots";
				scrPane.appendChild(scrL);
				scrPane.appendChild(enlInfoIco);
				scrPane.appendChild(enlInfo);
				divCarousel.appendChild(ol);
				divCarousel.appendChild(divWrap);
				divCarousel.appendChild(aPrev);
				divCarousel.appendChild(aNext);
				scrPane.appendChild(divCarousel);
				document.getElementById('webScrshoot').appendChild(scrPane);

			} else {
				document.getElementById('screenshot').style.display = "none";
				document.getElementById('webScrshoot').style.display = "none";
				document.getElementById('navScr').style.display = "none";
			}

			console.log(scr.status);
			console.log(scr.domain);
			console.log(scr.historical.length);
			console.log(scr.historical);
			console.log(scr.historical[0]);
			
			//Load HQ Screenshot image from slider
			$('.carousel-inner .item img').click(function(){
				$this = $(this);
				$image = $this.attr('full');
				$date = $this.parent().text();
				console.log($date);
				$("#container").hide();
				$("#scrshootsHolder").html('<h3>' + url + ' screenshot captured on ' + $date + '</h3>' + '<span class="glyphicon glyphicon-info-sign" style="padding-left: 20px; padding-right: 5px"></span><span>Press <b>Esc</b> key to return</span>' + '<div id="overlay">' + '<img title="Press Esc key to return" src="'+$image +'" />' + '</div>').fadeIn(1);
				$('#scrshootsHolder').css('cursor','auto');
			});

			$(document).keyup(function(e) {
				if (e.which === 27) {
					$('#scrshootsHolder').empty();
					//$('#overlay').remove();
					$("#container").show();
				}
			});
		}
		
		catch (err) {
			console.log("Error (Screenshots): ", err);
		}
		
	} else {
		document.getElementById('screenshot').style.display = "none";
		document.getElementById('webScrshoot').style.display = "none";
		document.getElementById('navScr').style.display = "none";
	}
}

/**
* Webpage Cache
*
*/
function webcache (url) {
    try {
        var req = new XMLHttpRequest();
        req.open('GET', "http://archive.org/wayback/available?url=" + url, false);
        req.send(null);
        if(req.status == 200 || req.readyState == 4) {
            try {
                var cache = JSON.parse(req.responseText);
                if (cache.archived_snapshots.closest.available == true) {
                    console.log(cache);
                    console.log(cache.archived_snapshots.closest.timestamp);
                    console.log(cache.archived_snapshots.closest.url);

                    var cachePane = document.createElement('fieldset'), cacheL = document.createElement('legend'), cacheUl1 = document.createElement('ul'), cacheUl2 = document.createElement('ul'), cacheUl3 = document.createElement('ul'), cacheFrame = document.createElement('iframe');

                    cacheFrame.setAttribute('src',""+cache.archived_snapshots.closest.url+"");
                    cacheFrame.setAttribute('frameborder', 3);
                    cacheFrame.setAttribute('marginheight', 0);
                    cacheFrame.setAttribute('marginwidth', 0);
                    cacheFrame.setAttribute('scrolling', "yes");
                    cacheFrame.setAttribute('allowTransparency', "true");
                    cacheFrame.setAttribute('width', "100%");
                    cacheFrame.setAttribute('height', "600");
                    cacheFrame.setAttribute('style', 'overflow-x: hidden; overflow-y: scroll');

                    cacheUl1.setAttribute('style','list-style: none');
                    cacheUl2.setAttribute('style','list-style: none');
                    cacheUl3.setAttribute('style','list-style: none');
                    var perma1 = document.createElement('a');
                    perma1.setAttribute('href', "https://web.archive.org/web/*/" + url);
                    perma1.setAttribute('target','_blank');
                    perma1.innerText = "https://web.archive.org/web/*/" + url;

                    var perma2 = document.createElement('a');
                    perma2.setAttribute('href', "http://webcache.googleusercontent.com/search?q=cache:" + url);
                    perma2.setAttribute('target','_blank');
                    perma2.innerText = "http://webcache.googleusercontent.com/search?q=cache:" + url;

                    var cacheSpan1 = document.createElement('span');

                    var linebr = document.createElement('br');
                    var cacheTimeStamp = cache.archived_snapshots.closest.timestamp;
                    cacheSpan1.innerText = "WayBack Machine's cached date: " + cacheTimeStamp.slice(0, 4) + "-" + cacheTimeStamp.slice(4,6) + "-" + cacheTimeStamp.slice(6,8);
                    cacheL.innerText = url + "'s cached version";
                    cachePane.appendChild(cacheL);
                    cacheUl1.appendChild(cacheSpan1);
                    cacheUl2.appendChild(perma1);
                    cacheUl3.appendChild(perma2);
                    cachePane.appendChild(cacheUl1);
                    cachePane.appendChild(cacheUl2);
                    cachePane.appendChild(cacheUl3);
                    cachePane.appendChild(linebr);
                    cachePane.appendChild(cacheFrame);
                    document.getElementById('webcacheView').appendChild(cachePane);   
                } else {
                    document.getElementById('webcache').style.display = "none";
                      document.getElementById('navWebCache').style.display = "none";
                }
            }

            catch (err) {
                console.log("Error (webcache): ", err);
                document.getElementById('webcache').style.display = "none";
                document.getElementById('navWebCache').style.display = "none";
            }
        } else {
            document.getElementById('webcache').style.display = "none";
            document.getElementById('navWebCache').style.display = "none";
        }   
    }
    
    catch (err) {
        console.log("Error (webcache): ", err);
    }
}

/**
* FortiGuard Labs
*
*/
function fortiguard (url) {
//    $.ajax({url: fortiGuardLookup + url, success: function(result){
//            console.log("fortiguard: ", $(result));
//            console.log($(result).filter("div[class^='col-md-9 col-sm-12']").text());
////        console.log($(result).filter("div[class^='col-md-9 col-sm-12']").text());
////        console.log($(result).filter("h4[class^='info_title']:first").text());
////        console.log($(result).filter("h4[class^='info_title']:next").text());
//    }});
    
    try {
        var req = new XMLHttpRequest();
        req.open('GET', fortiGuardLookup + url, false);
        req.send(null);
        if(req.status == 200) {
            urlDump = req.response;
            console.log($(urlDump).find("h4[class^='info_title']:first").text());
            var fgPane = document.createElement('fieldset'), fgL = document.createElement('legend'), fgUl1 = document.createElement('ul'), fgUl2 = document.createElement('ul');

            fgUl1.setAttribute('style','list-style: none');
            fgUl2.setAttribute('style','list-style: none');

            var perma = document.createElement('a');
            perma.setAttribute('href', fortiGuardLookup + url);
            perma.setAttribute('target','_blank');
            perma.innerText = fortiGuardLookup + url;
            
//            fgUl1.innerText = $(urlDump).find("h4[class^='info_title']:first").text());
            fgUl2.innerText = $(urlDump).find("div[class^='col-md-9 col-sm-12']:first").text();
            
            fgL.innerText = "FortiGuard Labs";
            fgPane.appendChild(fgL);
            fgUl1.appendChild(perma);
            fgPane.appendChild(fgUl1);
            fgPane.appendChild(fgUl2);
            document.getElementById('fortiguardLab').appendChild(fgPane);
        } else {
            document.getElementById('navFG').style.display = "none";
        }
    }
	
    catch (err) {
        console.log("Error (fortiguard): ", err);
    }
}

/**
* GSB
*
*/
function gsb (url) {
	var req = new XMLHttpRequest();
	req.open('GET', 'https://sb-ssl.google.com/safebrowsing/api/lookup?client=code10101001&key={API_KEY}&appver=0.0.9&pver=3.1&url='+url, false);
	//req.open('GET', 'https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html#url=' + url, false);
	req.send(null);
	if(req.status == 200) {
        try {
            urlDump = req.response;
            console.log("GSB: ", urlDump);
            var gsbPane = document.createElement('fieldset'), gsbL = document.createElement('legend'), gsbUl = document.createElement('ul'), gsbUl1 = document.createElement('ul'), gsbVerdict = document.createElement('li');
            gsbUl.setAttribute('style','list-style: none');
            gsbUl1.setAttribute('style','list-style: none');
            var perma = document.createElement('a');
            perma.setAttribute('href', "https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html#url=" + url);
            perma.setAttribute('target','_blank');
            perma.setAttribute("style", "word-break: break-all");
            perma.innerText = "https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html#url=" + url;
			gsbVerdict.innerText = "Current status: " + urlDump;
			//document.getElementById('gsbVerdict').innerHTML = $(urlDump).find("div[id^='status-overview-container']").html();
			//document.getElementById('McAfeeWebsiteCate').innerHTML = $(urlDump).find("td[style^='text-align:left']").text();
            gsbL.innerText = "Google Safebrowsing"
            gsbPane.appendChild(gsbL);
            gsbUl.appendChild(perma);
            gsbUl1.appendChild(gsbVerdict);
            gsbPane.appendChild(gsbUl);
            gsbPane.appendChild(gsbUl1);
            document.getElementById('gsb').appendChild(gsbPane);
		}
		
		catch (err) {
			console.log("Error (GSB): ", err);
		}		
	} else {
		console.log("GSB Status: ",req.status, req.statusText);
		var gsbPane = document.createElement('fieldset'), gsbL = 			document.createElement('legend'), gsbUl = document.createElement('ul'), gsbUl1 = document.createElement('ul');
		gsbUl.setAttribute('style','list-style: none');
		gsbUl1.setAttribute('style','list-style: none');
		
		var perma = document.createElement('a');
		perma.setAttribute('href', "https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html#url=" + url);
		perma.setAttribute('target','_blank');
		perma.innerText = "https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html#url=" + url;
		
		gsbUl1.innerText = "Current status: Untested";
		
		gsbL.innerText = "Google Safebrowsing"
		gsbPane.appendChild(gsbL);
		gsbUl.appendChild(perma);
		gsbPane.appendChild(gsbUl);
		gsbPane.appendChild(gsbUl1);
		document.getElementById('gsb').appendChild(gsbPane);
	}
}

//function gsb(url) {
//    try {
//        var reqGSB = {
//            "client": {
//              "clientId": "urlscanner",
//              "clientVersion": "0.0.9"
//            },
//            "threatInfo": {
//              "threatTypes":      ["MALWARE", "SOCIAL_ENGINEERING"],
//              "platformTypes":    ["WINDOWS"],
//              "threatEntryTypes": ["URL"],
//              "threatEntries": [
//                {"url": "http://twitterverified.live"},
//                {"url": "http://www.yahoo.com"},
//                {"url": url}
//              ]
//            }
//        };
//        
//        $.ajax({
//            type: "POST",
//            url: "https://safebrowsing.googleapis.com/v4/threatMatches:find?key=AIzaSyCB41VaMpfQzbA2hBcGyo8sXa4IY8xEsU4",
//            data: reqGSB,
//            success: function(data){
//                console.log(data);
//                var parser = new DOMParser();
//                var dump = parser.parseFromString(data, "text/html");
//                console.log(dump);
////                extractFromDump(dump);
////                $('#sslChecker .info').empty();
////                $('#sslURLinput').prop('disabled',false);
////                $('#sslURLsubmit').prop('disabled',false);
////                $('#sslURLsubmit').text('SSL Check');
//            },
//            dataType: "application/json",
//            error: function() {
//                console.log("SSL Check: ", err);
//                $('#sslChecker .info').empty();
//                $('#sslTable').empty();
//                $('#sslChecker .info').append("<div class='alert alert-warning'><span class='glyphicon glyphicon-remove-sign'></span> Unable to connect.</div>");
//                setTimeout(function(){ 
//                    $('#sslChecker .info').empty();
//                }, 2000);
//                $('#sslURLinput').prop('disabled',false);
//                $('#sslURLsubmit').prop('disabled',false);
//                $('#sslURLsubmit').text('SSL Check');
//            }
//        });
////        $('#sslChecker .info').empty();
//    }
//    
//    catch(err) {
//        console.log("GSB: ", err);
//    }
//}

/**
* PhishTank
*
*/
function phishtank(url) {
    url = phishTankLookup + url;
	var req = new XMLHttpRequest();
	var parameters = "url=" + encodeURIComponent(unescape(url)) + "&format=" + encodeURIComponent(unescape("json")) + "&app_key=" + encodeURIComponent(unescape("e01bcd582e54dab00afe3f5772f4b08fc38ec3bb2ee34fb125e4af6e30bd5e1d"));
	req.open('POST', "http://checkurl.phishtank.com/checkurl/", false);
	req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	req.send(parameters);
	console.log("phishtank: ", req);
	if(req.readyState == 4 || req.status == 200) {
		console.log("phishtank: ", req.responseText);
	}
}

/**
* McAfee
*
*/
function mcafee (url) {
    try {
        var req = new XMLHttpRequest();  
        req.open('GET', mcAfeeSiteAdvisor+url, false);
        req.send(null);
        if(req.status == 200) {
            urlDump = req.response;
            var mcaPane = document.createElement('fieldset'), mcaL = document.createElement('legend'), mcaUl = document.createElement('ul'), mcaUl1 = document.createElement('ul'), mcaUl2 = document.createElement('ul');

            mcaUl.setAttribute('style','list-style: none');
            mcaUl1.setAttribute('style','list-style: none');
            mcaUl2.setAttribute('style','list-style: none');

            var perma = document.createElement('a');
            perma.setAttribute('href', mcAfeeSiteAdvisor + url);
            perma.setAttribute('target','_blank');
            perma.innerText = mcAfeeSiteAdvisor + url;

            try {
                var mcaVerdict = document.createElement('li'),
                    mcaWebsiteCate = document.createElement('li');
                //console.log($(urlDump).find("div[class^='content'] ul").text());
                //mcaVerdict.innerText = $(urlDump).find("p[class^='intro']:first").text();
                //mcaWebsiteCate.innerText = $(urlDump).find("td[style^='text-align:left']").text();
                mcaVerdict.innerText = "Website status: " + $(urlDump).find("span[class^='rating']").text();
                mcaWebsiteCate.innerText = "Website category: " + $(urlDump).find("div[class^='content'] li").text().replace(/ /g,'');
            }

            catch (err) {
                console.log("Error (McAfee): ", err);
            }

            mcaL.innerText = "McAfee SiteAdvisor";
            mcaPane.appendChild(mcaL);
            mcaUl.appendChild(perma);
            mcaUl1.appendChild(mcaVerdict);
            mcaUl2.appendChild(mcaWebsiteCate);
            mcaPane.appendChild(mcaUl);
            mcaPane.appendChild(mcaUl1);
            mcaPane.appendChild(mcaUl2);
            document.getElementById('mcafee').appendChild(mcaPane);

        } else {
            console.log("Status: ",req.status, req.statusText);
        }   
    }
    catch (err) {
        console.log("Error (McAfee): ", err);
    }
}

/**
* Norton SafeWeb
*
*/
function norton (url) {
	var req = new XMLHttpRequest();
	req.open('GET', nortonSafeWeb+url, false);
	req.send(null);
	if(req.status == 200) {
		urlDump = req.response;
		//var URLVerdict = $(urlDump).find("img[class^='big_clip']").attr("alt");
		var norPane = document.createElement('fieldset'), norL = 			document.createElement('legend'), norUl = document.createElement('ul'), norUl1 = document.createElement('ul');
		//var norUl2 = document.createElement('ul');
		
		norUl.setAttribute('style','list-style: none');
		norUl1.setAttribute('style','list-style: none');
		//norUl2.setAttribute('style','list-style: none');
		
		var perma = document.createElement('a');
		perma.setAttribute('href', nortonSafeWeb + url);
		perma.setAttribute('target','_blank');
		perma.innerText = nortonSafeWeb + url;
		
		try {
			var norVerdict = document.createElement('li'),
				norSummary = document.createElement('li');
			//var norThreats = document.createElement('li'), norCommunityRating = document.createElement('li');
			var tempVeridct = $(urlDump).find("div[class^='span3']" && "b:first").text();
			if (tempVeridct == " Total threats") {
				norVerdict.innerText = "Verdict: SAFE";	
			} else {
				norVerdict.innerText = "Verdict: " + tempVeridct;
			}
			
			if ($(urlDump).find("div[class^='span10']").text() == undefined) {
					norSummary.innerText = url + " has not been tested yet.";
				} else {
					norSummary.innerText = $(urlDump).find("div[class^='span10']").text();
					//norCommunityRating.innerText = "Community Rating: " +  $(urlDump).find("div[class^='community-text']").text();
				console.log($(urlDump).find("div[class^='big_community_wrapper'].label").text());	
//					norThreats.innerText = "Threat Name: " + $(urlDump).find("div[id^='detail-1']").find("div[class^='span9']").text().replace(/\s/g, "\t");
//					console.log("detail-1: ", $(urlDump).find("div[id^='detail-1']").find("div[class^='span9']").text().replace(/\s/g, "/\n"));
				}
		}
		
		catch (err) {
			console.log("Error (Norton): ", err);
		}
		
		norL.innerText = "Norton SafeWeb";
		norPane.appendChild(norL);
		norUl.appendChild(perma);
		norUl1.appendChild(norVerdict);
		norUl1.appendChild(norSummary);
		//norUl1.appendChild(norThreats);
		//norUl1.appendChild(norCommunityRating);
		norPane.appendChild(norUl);
		norPane.appendChild(norUl1);
		//norPane.appendChild(norUl2);
		document.getElementById('norton').appendChild(norPane);
		
	} else {
		console.log("Status: ",req.status, req.statusText);
	}
}

/*
function bitdefender (url) {
	var req = new XMLHttpRequest();
	req.open('GET', bitdefenderTL + url, false);
	req.send(null);
	if(req.status == 200) {
		urlDump = req.response;
		var perma = document.createElement('a');
		perma.setAttribute('href', bitdefenderTL + url);
		perma.setAttribute('target','_blank');
		perma.innerText = bitdefenderTL + url;
		document.getElementById('bitdefenderPermalink').appendChild(perma);
		//document.getElementById('bitdefenderVerdict').innerHTML = 
		var di = $(urlDump).find("div[id^='container']" && "div[class^='container-displayed']").text();
		console.log(di);
	}
}
*/

/**
* TrendMicro
*
*/
function trendMicroSSC (url) {
	var req = new XMLHttpRequest();
	var parameters = "urlname=http://" + encodeURIComponent(unescape(url));
	req.open('POST', trendMicro, false);
	req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	req.setRequestHeader("Pragma", "no-cache");
	req.setRequestHeader("Cache-control", "no-cache");
	//req.setRequestHeader("Cookie", "no-store");
	//req.setRequestHeader("Set-cookie", "no-store");
	//req.withCredentials = false;
	req.send(parameters);
    
	var tmPane = document.createElement('fieldset'), tmL = document.createElement('legend'), tmUl = document.createElement('ul'), tmUl1 = document.createElement('ul'), tmUl2 = document.createElement('ul'), tmUl3 = document.createElement('ul');
		tmUl.setAttribute('style','list-style: none');
		tmUl1.setAttribute('style','list-style: none');
		tmUl2.setAttribute('style','list-style: none');
		tmUl3.setAttribute('style','list-style: none');
	if(req.status == 200) {
//		console.log("TM: ", req);
		urlDump = req.response;
		
		try {
			var tmVerdict = document.createElement('li'), tmVerdictDesc = document.createElement('li'), tmCat = document.createElement('li'), tmCatDesc = document.createElement('li');
			
			tmL.innerText = "TrendMicro Site Safety Center";
			tmPane.appendChild(tmL);
			var testTMVerdict = $(urlDump).find("div[class^='labeltitleresult']").text();
			if (testTMVerdict == "" || testTMVerdict == undefined) {
//            if (urlDump.responseURL == "https://global.sitesafety.trendmicro.com/captcha.php") {
				tmVerdict.innerText = "You have exceeded your allowed request limit, please check " + url + " verdict manually on below Trend Micro Site Safety Center link."
				var tmLink = document.createElement('a');
				tmLink.setAttribute('href', 'https://global.sitesafety.trendmicro.com/index.php');
				tmLink.setAttribute('target','_blank');
				tmLink.innerText = "https://global.sitesafety.trendmicro.com/index.php";
				tmUl.appendChild(tmVerdict);
				tmVerdictDesc.appendChild(tmLink);
				tmUl1.appendChild(tmVerdictDesc);
				tmPane.appendChild(tmUl);
				tmPane.appendChild(tmUl1);
				
			} else {
				
				tmVerdict.innerText = "Verdict: " +  $(urlDump).find("div[class^='labeltitleresult']").text();
				tmVerdictDesc.innerText = $(urlDump).find("div[class^='labelinfo columnholder2']:first").text();
				tmCat.innerText = "Category: " +  $(urlDump).find("div[class^='labeltitlesmallresult']").text();
				tmCatDesc.innerText = $(urlDump).find("div[class^='labelinfo columnholder2']:last").text();

				tmVerdict.setAttribute('style','font-weight: bold');
				
				tmUl.appendChild(tmVerdict);
				tmUl1.appendChild(tmVerdictDesc);
				tmUl2.appendChild(tmCat);
				tmUl3.appendChild(tmCatDesc);
				tmPane.appendChild(tmUl);
				tmPane.appendChild(tmUl1);
				tmPane.appendChild(tmUl2);
				tmPane.appendChild(tmUl3);
			}
			
		
			console.log("Verdict: ", $(urlDump).find("div[class^='labeltitleresult']").text());
			console.log("desc: ", $(urlDump).find("div[class^='labelinfo columnholder2']:first").text());
			console.log("Category: ", $(urlDump).find("div[class^='labeltitlesmallresult']").text());
			console.log("Category Desc: ", $(urlDump).find("div[class^='labelinfo columnholder2']:last").text());
			
		}
		
		catch (err) {
			console.log("Error(TrendMicro): ", err);
		}
		
		document.getElementById('tmicro').appendChild(tmPane);
		
	} else {
		
		tmVerdict.innerText = "You have exceeded your request quota, check " + url + " verdict manually on Trend Micro Site Safety Center."
		var tmLink = document.createElement('a');
		tmLink.setAttribute('href', 'https://global.sitesafety.trendmicro.com/index.php');
		tmLink.setAttribute('target','_blank');
		tmLink.innerText = "https://global.sitesafety.trendmicro.com/index.php";
		tmUl.appendChild(tmVerdict);
		tmVerdictDesc.appendChild(tmLink);
		tmUl1.appendChild(tmVerdictDesc);
		
		tmL.innerText = "TrendMicro Site Safety Center";
		tmPane.appendChild(tmL);
		tmPane.appendChild(tmUl);
		tmPane.appendChild(tmUl1);
		document.getElementById('tmicro').appendChild(tmPane);
	}
}

/**
* AVG
*
*/
function avg (url) {
	var req = new XMLHttpRequest();  
	req.open('GET', avgThreatLabs + url, false);
	try {
        req.send(null);
        if(req.status == 200) {
            urlDump = req.response;
            var avgPane = document.createElement('fieldset'), avgL = 			document.createElement('legend'), avgUl = document.createElement('ul'), avgUl1 = document.createElement('ul'), avgUl2 = document.createElement('ul'), avgUl3 = document.createElement('ul');

            avgUl.setAttribute('style','list-style: none');
            avgUl1.setAttribute('style','list-style: none');
            avgUl2.setAttribute('style','list-style: none');
            avgUl3.setAttribute('style','list-style: none');

            var perma = document.createElement('a');
            perma.setAttribute('href', avgThreatLabs + url);
            perma.setAttribute('target','_blank');
            perma.innerText = avgThreatLabs + url;
            try {
                var avgSafety = document.createElement('li'), avgMalware = document.createElement('li'), avgCompromised = document.createElement('li');
                avgSafety.innerText = "Safety Rating: " +  $(urlDump).find("div[class^='rating']:first").text().replace(/^\n\r\s+|\s+$/gm,'').trim('\n\r','');
                avgMalware.innerText = "Malware Found: " +  $(urlDump).find("h5:first").text().replace(/^\n\r\s+|\s+$/gm,'').trim('\n\r','');
                avgCompromised.innerText = "Compromised Pages: " +  $(urlDump).find("div[class^='compromised-pages-number']").text().replace(/^\n\r\s+|\s+$/gm,'').trim('\n\r',' ');	
            }

            catch (err) {
                console.log ("Error (AVG): ", err);
            }

            avgPane.appendChild(avgUl);
            avgPane.appendChild(avgUl1);
            avgPane.appendChild(avgUl2);
            avgPane.appendChild(avgUl3);
            document.getElementById('avgThreatLab').appendChild(avgPane);


            avgL.innerText = "AVG ThreatLab";
            avgPane.appendChild(avgL);
            avgUl.appendChild(perma);
            avgUl1.appendChild(avgSafety);
            avgUl2.appendChild(avgMalware);
            avgUl3.appendChild(avgCompromised);
            avgPane.appendChild(avgUl);
            avgPane.appendChild(avgUl1);
            avgPane.appendChild(avgUl2);
            avgPane.appendChild(avgUl3);
            document.getElementById('avgThreatLab').appendChild(avgPane);

        } else {
            console.log("Status: ",req.status, req.statusText);
    //		var avgSafety = document.createElement('span');
    //		avgSafety.innerText = "Safety Rating: Untested";
    //		document.getElementById('avg').appendChild(avgSafety);
            document.getElementById('navAvg').style.display = "none";
        }    
    }
    
    catch (err) {
        console.log("AVG Error: ", err);
        document.getElementById('navAvg').style.display = "none";
    }
    
}

/**
* WOT
*
*/
function wot (url) {
	var req = new XMLHttpRequest();
	req.open('GET', 'https://api.mywot.com/0.4/public_link_json2?hosts='+url+'/&key=e78c097d8a099f2214154bcc89141a4b78b4287b', false);
	req.send(null);
	if(req.readyState == 4 && req.status == 200) {
		var wotResponse = JSON.parse(req.response);
		//console.log(wotResponse);
		var wotPane = document.createElement('fieldset'), wotL = 			document.createElement('legend'), wotUl = document.createElement('ul');
			wotUl.setAttribute('style','list-style: none');
		
		var wotPerma = document.createElement('a');
			wotPerma.setAttribute('href', wotScore + url);
			wotPerma.setAttribute('target','_blank');
			wotPerma.innerText = wotScore + url;
			
		if (wotResponse[url]) {
			try {
				var wotUl1 = document.createElement('ul');
			wotUl1.setAttribute('style','list-style: none'), wotUl2 = document.createElement('ul'), wotUl2.setAttribute('style','list-style: none'), wotTrustworthiness = document.createElement('li'), wotChildSafety = document.createElement('li'), wotCategories = document.createElement('li');
				
				wotTrustworthiness.innerText = "Trustworthiness: " + wotResponse[url][0][0];
				wotChildSafety.innerText = "Child safety: " +  wotResponse[url][4][0];
				var catDesc = "";
				var ul = document.createElement('ul');
				ul.setAttribute('list-style','dot');
				for (catId in wotResponse[url].categories) {
					switch (catId) {
						case '101':
							catDesc = "Malware or viruses";
							break;
						case '102':
							catDesc = "Poor customer experience";
							break;
						case '103':
							catDesc = "Phishing";
							break;
						case '104':
							catDesc = "Scam";
							break;
						case '105':
							catDesc = "Potentially illegal";
							break;
						case '201':
							catDesc = "Misleading claims or unethical";
							break;
						case '202':
							catDesc = "Privacy risks";
							break;
						case '203':
							catDesc = "Suspicious";
							break;
						case '204':
							catDesc = "Hate, discrimination";
							break;
						case '205':
							catDesc = "Spam";
							break;
						case '206':
							catDesc = "Potentially unwanted programs";
							break;
						case '207':
							catDesc = "Ads / pop-ups";
							break;
						case '301':
							catDesc = "Online tracking";
							break;
						case '302':
							catDesc = "Alternative or controversial medicine";
							break;
						case '303':
							catDesc = "Opinions, religion, politics";
							break;
						case '501':
							catDesc = "Good site";
							break;
						case '401':
							catDesc = "Adult content";
							break;
						case '402':
							catDesc = "Incidental nudity";
							break;
						case '403':
							catDesc = "Gruesome or shocking";
							break;
						case '404':
							catDesc = "Site for kids";
							break;
						default:
							catDesc = "Other";
							break;
					}
					var li = document.createElement('li');
					li.innerText = catDesc;
					ul.appendChild(li);
				}
				wotCategories.innerHTML = "Reasons behind user ratings: ";
				wotCategories.appendChild(ul);
				}
			catch (err) {
				console.log("Error (WOT): ", err);
			}
			
			wotL.innerText = "WOT";
			wotPane.appendChild(wotL);
			wotUl.appendChild(wotPerma);
			wotUl1.appendChild(wotTrustworthiness);
			wotUl1.appendChild(wotChildSafety);
			wotUl2.appendChild(wotCategories);
			wotPane.appendChild(wotUl);
			wotPane.appendChild(wotUl1);
			wotPane.appendChild(wotUl2);
			document.getElementById('myWot').appendChild(wotPane);
			
		}
    } else {
		console.log("Status: ", req.status, req.statusText);
		var wotPerma = document.createElement('a');
			wotPerma.setAttribute('href', wotScore + url);
			wotPerma.setAttribute('target','_blank');
			wotPerma.innerText = wotScore + url;
			
		var wotPane = document.createElement('fieldset'), wotL = 			document.createElement('legend'), wotUl = document.createElement('ul'), wotLi = document.createElement('li');
		wotL.innerText = "WOT";
		wotPane.appendChild(wotL);
		wotPane.appendChild(wotPerma);
		wotLi.innerText = "This link isn't rated.";
		wotUl.appendChild(wotli);
		wotPane.appendChild(wotUl);
		document.getElementById('myWot').appendChild(wotPane);
	}
}

/**
* URLVoid
*
*/
function urlvoid (url) {
	var req = new XMLHttpRequest();
	req.open('GET', 'http://api.urlvoid.com/api1000/5541f3febbe790332423fd5f87b0967dd1de28d4/host/'+url, false);
	req.send(null);
	var parser, xmlDoc;
	//console.log(req);
	var urlDump = req.responseXML;
	if(req.status == 200) {
		var voidPane = document.createElement('fieldset'), voidL = document.createElement('legend'), voidUl = document.createElement('ul');
			voidUl.setAttribute('style','list-style: none');
		
		var urlVoidPerma = document.createElement('a');
			urlVoidPerma.setAttribute("href", "http://www.urlvoid.com/scan/" + url);
			urlVoidPerma.setAttribute("target", "_blank");
			urlVoidPerma.innerText = "http://www.urlvoid.com/scan/" + url;
		
		try {
			var urlVoidHostname = document.createElement('li'), urlVoidIP = document.createElement('li'), urlVoidAnalysisDate = document.createElement('li'), urlVoidCount = document.createElement('li'), urlVoidScannerTable = document.createElement('table'); urlVoidScannerTable.setAttribute("class","table table-striped");
			
			urlVoidHostname.innerText = "URL: " +  urlDump.getElementsByTagName("host")[0].childNodes[0].nodeValue;
			
			urlVoidIP.innerText = "IP Address: " +  urlDump.getElementsByTagName("addr")[0].childNodes[0].nodeValue;
			
		
			var UNIX_timestamp = urlDump.getElementsByTagName("updated")[0].childNodes[0].nodeValue;
			var t = new Date(UNIX_timestamp * 1000);
			var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
			var year = t.getFullYear();
			var month = months[t.getMonth()];
			var date = t.getDate();
			var hour = t.getHours();
			var min = t.getMinutes();
			var sec = t.getSeconds();
			var timeStamp = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;
	 
		urlVoidAnalysisDate.innerText = "Analysis date: " + timeStamp;
		if (urlDump.getElementsByTagName("count")[0]) {
			urlVoidCount.innerText = "Detection ratio: " +  urlDump.getElementsByTagName("count")[0].childNodes[0].nodeValue + "/25";
			var voidCount = urlDump.getElementsByTagName("count")[0].childNodes[0].nodeValue;

			if (voidCount != 0) {
				var thead = document.createElement('thead');
				var tr0 = document.createElement('tr');
				var th1 = document.createElement('th');
				var th2 = document.createElement('th');
				th1.innerText = "URL Scanner";
				th2.innerText = "Permalink";
				tr0.appendChild(th1);
				tr0.appendChild(th2);
				thead.appendChild(tr0);
				urlVoidScannerTable.appendChild(thead);
				var tbody = document.createElement('tbody');
				var i = 0;
				while (i < voidCount) {
					var tr1 = document.createElement('tr');
					var td1 = document.createElement('td');
					var td2 = document.createElement('td');
					td1.innerText = urlDump.getElementsByTagName("engine")[i].childNodes[0].nodeValue;
					switch (urlDump.getElementsByTagName("engine")[i].childNodes[0].nodeValue) {
						case 'MyWOT':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://www.mywot.com/en/scorecard/" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://www.mywot.com/en/scorecard/" + url;
							td2.appendChild(td2a);
							break;
						case 'SCUMWARE':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://www.scumware.org/report/" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://www.scumware.org/report/" + url;
							td2.appendChild(td2a);
							break;
						case 'GoogleSafeBrowsing':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html#url=" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://www.google.com/safebrowsing/diagnostic?site=" + url;
							td2.appendChild(td2a);
							break;
						case 'Fortinet':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://fortiguard.com/iprep?data=" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://fortiguard.com/iprep?data=" + url;
							td2.appendChild(td2a);
							break;
						case 'MalwareDomainList':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://www.malwaredomainlist.com/mdl.php?search=" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://www.malwaredomainlist.com/mdl.php?search=" + url;
							td2.appendChild(td2a);
							break;
						case 'Malc0de':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://malc0de.com/database/index.php?search=" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://malc0de.com/database/index.php?search=" + url;
							td2.appendChild(td2a);
							break;
						case 'PhishTank':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://www.phishtank.com/");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://www.phishtank.com/";
							td2.appendChild(td2a);
							break;
						case 'SURBL':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://www.surbl.org/surbl-analysis");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://www.surbl.org/surbl-analysis";
							td2.appendChild(td2a);
							break;
						case 'URLVir':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://www.urlvir.com/submit-urls/");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://www.urlvir.com/submit-urls/";
							td2.appendChild(td2a);
							break;
						case 'ThreatLog':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://www.threatlog.com/domain/" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://www.threatlog.com/domain/" + url;
							td2.appendChild(td2a);
							break;
						case 'urlQuery':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://urlquery.net/");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://urlquery.net/";
							td2.appendChild(td2a);
							break;
						case 'MalwarePatrol':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://www.malware.com.br/");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://www.malware.com.br/";
							td2.appendChild(td2a);
							break;
						case 'hpHosts':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://hosts-file.net/default.asp?s=" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://hosts-file.net/default.asp?s=" + url;
							td2.appendChild(td2a);
							break;
						case 'BitDefender':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://trafficlight.bitdefender.com/info?url=" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://trafficlight.bitdefender.com/info?url=" + url;
							td2.appendChild(td2a);
							break;
						case 'Avira':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://www.avira.com/en/for-home" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://www.avira.com/en/for-home";
							td2.appendChild(td2a);
							break;
						case 'AVGThreatLabs':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://www.avgthreatlabs.com/ww-en/website-safety-reports/domain/yahoo.com" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://www.avgthreatlabs.com/ww-en/website-safety-reports/domain/" + url;
							td2.appendChild(td2a);
							break;
						case 'Quttera':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://quttera.com/detailed_report/" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://quttera.com/detailed_report/" + url;
							td2.appendChild(td2a);
							break;
						case 'Sucuri':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://sitecheck.sucuri.net/results/" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://sitecheck.sucuri.net/results/" + url;
							td2.appendChild(td2a);
							break;
						case 'OpenPhish':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://openphish.com/");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://openphish.com/";
							td2.appendChild(td2a);
							break;
						case 'Spam404':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://www.spam404.com/apps/search?q=" + url);
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://www.spam404.com/apps/search?q=" + url;
							td2.appendChild(td2a);
							break;
						case 'DrWeb':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://www.drweb.com/");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://www.drweb.com/";
							td2.appendChild(td2a);
							break;
						case 'DShield':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "https://www.dshield.org/suspicious_domains.html#search");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "https://www.dshield.org/suspicious_domains.html#search";
							td2.appendChild(td2a);
							break;
                        case 'CRDF':
							td2a = document.createElement('a');
							td2a.setAttribute("href", "http://threatcenter.crdf.fr/");
							td2a.setAttribute("target", "_blank");
							td2a.innerText = "http://threatcenter.crdf.fr/";
							td2.appendChild(td2a);
							break;
						default:
							break;
					}
					tr1.appendChild(td1);
					tr1.appendChild(td2);
					tbody.appendChild(tr1);
					i++;
				}
				urlVoidScannerTable.appendChild(tbody);
			}
		} else {
			urlVoidCount.innerText = "Detection ratio: 0/25";
		}
			
			
		}
		
		catch (err) {
			console.log("Error (URLVoid): " + err);
		}
		
		finally {
			if (urlDump.getElementsByTagName("details")[0]) {
				console.log(urlDump.getElementsByTagName("details")[0]);
			} else {
				var alertBoxDiv = document.createElement('div');
				alertBoxDiv.setAttribute('class','alert alert-warning alert-dismissible fade in');
				alertBoxDiv.setAttribute('role','alert');
				alertBoxDiv.innerHTML = "<span>Scan request successfully queued, click <a id='btnURLVoidLatest' href='#URLVoid' >latest scan report</a> to retrieve it!</span>";
				voidPane.appendChild(alertBoxDiv);
			}
		}
		
		voidL.innerText = "URLVoid";
				voidPane.appendChild(voidL);
				voidUl.appendChild(urlVoidPerma);
				voidUl.appendChild(urlVoidHostname);
				voidUl.appendChild(urlVoidIP);
				voidUl.appendChild(urlVoidAnalysisDate);
				voidUl.appendChild(urlVoidCount);
				voidPane.appendChild(voidUl);
				voidPane.appendChild(urlVoidScannerTable);
				document.getElementById('void').appendChild(voidPane);
		
	} else if (urlDump.getElementsByTagName("error")[0].childNodes[0].nodeValue) {
		console.log(urlDump.getElementsByTagName("error")[0].childNodes[0].nodeValue);
		console.log("Status: ",req.status, req.statusText);
	} else {
		console.log("Status: ",req.status, req.statusText);
	}
	
	//URLVoid - retrieve latest report
	$('#btnURLVoidLatest').click(function () {
			$('#void').empty();
			urlvoid(url);
		});
}

/**
* VirusTotal - Sending and scanning files
*
*/
function vtFileScan () {
	var req = new XMLHttpRequest();
	var vtScanFile = "https://www.virustotal.com/vtapi/v2/file/scan";
	//var parameters = "apikey=" + encodeURIComponent(unescape("d6ebbc0d1020b4804f989835462cd1d9fb6f287b40f811195110602727688eed"));
	//var file_to_send = open("../AdBlockPlusSetup.exe", "rb");
	//var file = [("file", "../AdBlockPlusSetup.exe", file_to_send)];
	
	var file = "../AdBlockPlusSetup.exe";
	console.log(file);
	req.open('POST', vtScanFile, false);
	
	var reader = new FileReader();
	reader.readAsDataURL(file);
	var formData = new FormData();
	formData.append("apikey", "d6ebbc0d1020b4804f989835462cd1d9fb6f287b40f811195110602727688eed");
	formData.append("file", file);
	console.log(formData);
	//parameters += formData;
	var parameters = "apikey=" + encodeURIComponent(unescape("d6ebbc0d1020b4804f989835462cd1d9fb6f287b40f811195110602727688eed")) + "&files=" + encodeURIComponent(unescape(reader));
	
	req.setRequestHeader("Content-Type","multipart/form-data");
	console.log(parameters);
	//xhr.send(formData);
	
	req.send(parameters);
	console.log(req);
}

/**
* VirusTotal - Retrieving file scan reports
*
*/
function vtFileReport (fileHashes) {
	console.log(fileHashes);
	var req = new XMLHttpRequest();		
	var vtFileReportURL = "https://www.virustotal.com/vtapi/v2/file/report";
	var parameters = "resource=" + encodeURIComponent(unescape(fileHashes)) + "&apikey=" + encodeURIComponent(unescape("d6ebbc0d1020b4804f989835462cd1d9fb6f287b40f811195110602727688eed"));
	req.open('POST', vtFileReportURL, false);
	req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	req.send(parameters);
	if(req.readyState == 4 && req.status == 200) {
		var vtFileResponse = JSON.parse(req.responseText);
		console.log(vtFileResponse);
		
		try {
			if (vtFileResponse.length) {
				for (i=0; i < vtFileResponse.length; i++) {
					var vtFilePane = document.createElement('fieldset'), vtFL = 			document.createElement('legend'), vtUl = document.createElement('ul'), vtUl1 = document.createElement('ul');
					vtUl.setAttribute('style','list-style: none');
					vtUl1.setAttribute('style','list-style: none');
					var vtLi = document.createElement('li'), vtLi1 = document.createElement('li'), vtLi2 = document.createElement('li'), vtLi3 = document.createElement('li'), vtLi4 = document.createElement('li'), vtLi5 = document.createElement('li'), perma = document.createElement('a');
					
					vtFL.innerText = "File: " + vtFileResponse[i].resource;
					
					if (vtFileResponse[i].response_code == 1) {
						perma.setAttribute("href", vtFileResponse[i].permalink);
						perma.setAttribute("target", "_blank");
						perma.innerText = vtFileResponse[i].permalink;
						vtLi.appendChild(perma);
						vtLi1.innerText = "MD5: " + vtFileResponse[i].md5;
						vtLi2.innerText = "SHA1: " + vtFileResponse[i].sha1;
						vtLi3.innerText = "SHA256: " + vtFileResponse[i].sha256;
						vtLi4.innerText = "Detection ratio: " +  vtFileResponse[i].positives + "/" + vtFileResponse[i].total;
						vtLi5.innerText = "Analysis date: " +  vtFileResponse[i].scan_date;

						vtUl.appendChild(vtLi);
						vtUl.appendChild(vtLi1);
						vtUl.appendChild(vtLi2);
						vtUl.appendChild(vtLi3);
						vtUl.appendChild(vtLi4);
						vtUl.appendChild(vtLi5);	
					} else {
//						perma.setAttribute("href", "https://www.virustotal.com/en/#search");
//						perma.setAttribute("target", "_blank");
//						perma.innerText = "https://www.virustotal.com/en/#search";
//						vtLi.appendChild(perma);
						
						var vtInfoIco = document.createElement('span'), vtInfo = document.createElement('span');
						vtInfoIco.setAttribute('class','glyphicon glyphicon-info-sign');
						vtInfoIco.setAttribute('style','padding:2px');
						vtInfo.innerText = vtFileResponse[i].verbose_msg + ". Please, visit https://www.virustotal.com/en/#file and upload the file to scan.";
//						vtUl.appendChild(vtLi);
						vtUl.appendChild(vtLi1);
						vtLi2.appendChild(vtInfoIco);
						vtLi2.appendChild(vtInfo);
						vtUl.appendChild(vtLi2);
					}
					
				
					vtFilePane.appendChild(vtFL);
					vtFilePane.appendChild(vtUl);
					//vtFilePane.appendChild(vtUl1);
					
					if ((vtFileResponse[i].response_code == 1) && (vtFileResponse[i].positives != 0)) {
						var vtFileTable = document.createElement('table');
						vtFileTable.setAttribute("class","table table-striped");
					
						var scanners = [], vtReport = "";
						scanners = vtFileResponse[i].scans;

						var thead = document.createElement('thead');
						var tr0 = document.createElement('tr');
						var th1 = document.createElement('th');
						var th2 = document.createElement('th');
						var th3 = document.createElement('th');
						th1.innerText = "Antivirus";
						th2.innerText = "Result";
						th3.innerText = "Update";
						tr0.appendChild(th1);
						tr0.appendChild(th2);
						tr0.appendChild(th3);
						thead.appendChild(tr0);
						vtFileTable.appendChild(thead);
						
						var tbody = document.createElement('tbody');
						for (n in scanners) {
							if (scanners[n].detected == true) {
								var tr1 = document.createElement('tr');
								var td1 = document.createElement('td');
								var td2 = document.createElement('td');
								var td3 = document.createElement('td');
								td1.innerText = n;
								td2.innerText = scanners[n].result;
								td3.innerText = scanners[n].update;
								tr1.appendChild(td1);
								tr1.appendChild(td2);
								tr1.appendChild(td3);
								tbody.appendChild(tr1);
								//vtReport += "<br />" + i + ": " + scanners[n].result;
							}
						}
						vtFileTable.appendChild(tbody);
						vtUl1.appendChild(vtFileTable);
					} else {
						
					}
					vtFilePane.appendChild(vtUl1);
					var br = document.createElement('br');
					vtFilePane.appendChild(br);
					document.getElementById('vtFileScanReport').appendChild(vtFilePane);
				}
			} else {
				var vtFilePane = document.createElement('fieldset'), vtFL = 			document.createElement('legend'), vtUl = document.createElement('ul'), vtUl1 = document.createElement('ul');
				vtUl.setAttribute('style','list-style: none');
				vtUl1.setAttribute('style','list-style: none');
				var vtLi = document.createElement('li'), vtLi1 = document.createElement('li'), vtLi2 = document.createElement('li'), vtLi3 = document.createElement('li'), vtLi4 = document.createElement('li'), vtLi5 = document.createElement('li'), perma = document.createElement('a');
				vtFL.innerText = "File: " + vtFileResponse.resource;
				
				if (vtFileResponse.response_code == 1) {
					perma.setAttribute("href", vtFileResponse.permalink);
					perma.setAttribute("target", "_blank");
                    perma.setAttribute("style", "word-break: break-all");
					perma.innerText = vtFileResponse.permalink;
					vtLi.appendChild(perma);
					vtLi1.innerText = "MD5: " + vtFileResponse.md5;
					vtLi2.innerText = "SHA1: " + vtFileResponse.sha1;
					vtLi3.innerText = "SHA256: " + vtFileResponse.sha256;
					vtLi4.innerText = "Detection ratio: " +  vtFileResponse.positives + "/" + vtFileResponse.total;
					vtLi5.innerText = "Analysis date: " +  vtFileResponse.scan_date;

					vtUl.appendChild(vtLi);
					vtUl.appendChild(vtLi1);
					vtUl.appendChild(vtLi2);
					vtUl.appendChild(vtLi3);
					vtUl.appendChild(vtLi4);
					vtUl.appendChild(vtLi5);	
				} else {
					var vtInfoIco = document.createElement('span'), vtInfo = document.createElement('span');
					vtInfoIco.setAttribute('class','glyphicon glyphicon-info-sign');
					vtInfoIco.setAttribute('style','padding:2px');
					vtInfo.innerText = vtFileResponse.verbose_msg + ". Please, visit https://www.virustotal.com/en/#search and upload the file to scan.";
					vtUl.appendChild(vtLi1);
					vtLi2.appendChild(vtInfoIco);
					vtLi2.appendChild(vtInfo);
					vtUl.appendChild(vtLi2);
				}
				
				vtFilePane.appendChild(vtFL);
				vtFilePane.appendChild(vtUl);
					
				if ((vtFileResponse.response_code == 1) && (vtFileResponse.positives != 0)) {
					var vtFileTable = document.createElement('table');
					vtFileTable.setAttribute("class","table table-striped");
					
					var scanners = [];
					scanners = vtFileResponse.scans;

					var thead = document.createElement('thead');
					var tr0 = document.createElement('tr');
					var th1 = document.createElement('th');
					var th2 = document.createElement('th');
					var th3 = document.createElement('th');
					th1.innerText = "Antivirus";
					th2.innerText = "Result";
					th3.innerText = "Update";
					tr0.appendChild(th1);
					tr0.appendChild(th2);
					tr0.appendChild(th3);
					thead.appendChild(tr0);
					vtFileTable.appendChild(thead);
						
					var tbody = document.createElement('tbody');
					for (n in scanners) {
						if (scanners[n].detected == true) {
							var tr1 = document.createElement('tr');
							var td1 = document.createElement('td');
							var td2 = document.createElement('td');
							var td3 = document.createElement('td');
							td1.innerText = n;
							td2.innerText = scanners[n].result;
							td3.innerText = scanners[n].update;
							tr1.appendChild(td1);
							tr1.appendChild(td2);
							tr1.appendChild(td3);
							tbody.appendChild(tr1);
						}
					}
					vtFileTable.appendChild(tbody);
					vtUl1.appendChild(vtFileTable);
				}
				vtFilePane.appendChild(vtUl1);
				document.getElementById('vtFileScanReport').appendChild(vtFilePane);
			}
		}
		
		catch (err) {
			console.log("Error (VTFileReport): ", err);
		}
	}
	
	$('#inputPane').hide();
    $('#adHolder').hide();
	$('html').css("cursor", "default");
	$('#fileScanReport-window').show();
}

/**
* VirusTotal - Retrieving URL scan reports 
*
*/	
function vtURLReport(url, latestReport, scan_id) {
		var req = new XMLHttpRequest();		
		var vtReportUrl = "http://www.virustotal.com/vtapi/v2/url/report";
		//console.log(vtScanResponse.scan_id);
		var parameters = "resource=" + encodeURIComponent(unescape(url)) + "&scan_id=" + encodeURIComponent(unescape(scan_id)) + "&apikey=" + encodeURIComponent(unescape("d6ebbc0d1020b4804f989835462cd1d9fb6f287b40f811195110602727688eed"));
		req.open('POST', vtReportUrl, false);
		req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		req.send(parameters);
		//console.log(req.responseText);
		if(req.readyState == 4 && req.status == 200) {
			var vtURLResponse = JSON.parse(req.responseText);
			console.log("vtURLReport: ", vtURLResponse);
			
			var vtPane = document.createElement('fieldset'), vtL = 			document.createElement('legend'), vtUl = document.createElement('ul'), vtUl1 = document.createElement('ul');
			vtUl.setAttribute('style','list-style: none');
			vtUl1.setAttribute('style','list-style: none');
			
			if (latestReport == 1) {
				var alertBoxDiv = document.createElement('div');
				alertBoxDiv.setAttribute('class','alert alert-warning alert-dismissible fade in');
				alertBoxDiv.setAttribute('role','alert');
				alertBoxDiv.innerHTML = "<span>Scan request successfully queued, click <a id='btnVTLatest' href='#VirusTotal' >latest scan report</a> to retrieve it!</span>";
				
				vtPane.appendChild(alertBoxDiv);
			} else {
				$('#alertBox').hide();
			}
			
			if (vtURLResponse.response_code == 1) {
				var perma = document.createElement('a');
				perma.setAttribute("href", vtURLResponse.permalink);
				perma.setAttribute("target", "_blank");
                perma.setAttribute("style", "word-break: break-all");
				perma.innerText = vtURLResponse.permalink;
				
				try {
					var vtPermalink = document.createElement('li'), vtUrl = document.createElement('li'), vtAnalysisDate = document.createElement('li'), vtPositivies = document.createElement('li');
					var vtScannerTable = document.createElement('table');
						vtScannerTable.setAttribute("class","table table-striped");
					
					var scanners = [], vtReport = "";
					scanners = vtURLResponse.scans;
					if ((vtURLResponse.response_code == 1) && (vtURLResponse.positives != 0)) {
						var thead = document.createElement('thead');
						var tr0 = document.createElement('tr');
						var th1 = document.createElement('th');
						var th2 = document.createElement('th');
						th1.innerText = "URL Scanner";
						th2.innerText = "Result";
						tr0.appendChild(th1);
						tr0.appendChild(th2);
						thead.appendChild(tr0);
						vtScannerTable.appendChild(thead);
						
						var tbody = document.createElement('tbody');
						for (i in scanners) {
							if (scanners[i].detected == true || scanners[i].result == "suspicious site") {
								var tr1 = document.createElement('tr');
								var td1 = document.createElement('td');
								var td2 = document.createElement('td');
								td1.innerText = i;
								td2.innerText = scanners[i].result;
								tr1.appendChild(td1);
								tr1.appendChild(td2);
								tbody.appendChild(tr1);
								//tbody.appendChild(tr2);

								//vtReport += "<br />" + i + ": " + scanners[i].result;
							}
						}
						vtScannerTable.appendChild(tbody);
					}

					vtUrl.innerText = "URL: " + vtURLResponse.url;
					vtAnalysisDate.innerText = "Analysis date: " +  vtURLResponse.scan_date;
					vtPositivies.innerText = "Detection ratio: " +  vtURLResponse.positives + "/" + vtURLResponse.total;
				}

				catch (err) {
					console.log("Error (VirusTotal URL Report): ", err);
				}

				vtL.innerText = "VirusTotal";
				vtPane.appendChild(vtL);
				vtPermalink.appendChild(perma);
				vtUl.appendChild(vtPermalink);
				vtUl.appendChild(vtUrl);
				vtUl.appendChild(vtAnalysisDate);
				vtUl.appendChild(vtPositivies);
				vtUl1.appendChild(vtScannerTable);
				vtPane.appendChild(vtUl);
				vtPane.appendChild(vtUl1);
				document.getElementById('vt').appendChild(vtPane);
			} else {
				console.log("Report wasn't ready, please again later!");
			}
		}
		//VT - retrive latest scan report
		$('#btnVTLatest').click(function () {
			$('#vt').empty();
			vtURLReport(url);
		});
	}

function vt (url) {
	
	/**
	* VirusTotal - Sending and scanning URLs
	*
	*/
	var req = new XMLHttpRequest();
	var vtScanURL = "https://www.virustotal.com/vtapi/v2/url/scan";
	var parameters = "url=" + encodeURIComponent(unescape(url)) + "&apikey=" + encodeURIComponent(unescape("d6ebbc0d1020b4804f989835462cd1d9fb6f287b40f811195110602727688eed"));
	req.open('POST', vtScanURL, false);
	req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	req.send(parameters);
	console.log(req.responseText);
	if(req.readyState == 4 && req.status == 200) {
		var vtScanResponse = JSON.parse(req.responseText);
		console.log(vtScanResponse.permalink);
		if (vtScanResponse.response_code == "1") {
			
//			$('#alertBox').addClass('alert alert-warning alert-dismissible fade in');
//			$('#alertBox').attr('role', 'alert');
//			$('#alertBox').append("<span>Scan request successfully queued, click <a id='btnVRLatest' href='#VirusTotal' >latest report</a> for the latest scan report!</span>");
			var latestReport = 1;	//set 1 to get latest report
			var scan_id = vtScanResponse.scan_id;	//latest scan report id
			
		}
	}
	return [latestReport, scan_id] ;
}
	
/**
* VT retrieving domain reports
*
*/
function vtDomainReport(url)	{
	var req1 = new XMLHttpRequest();
	var parametersDomain = "?domain=" + url + "&apikey=" + "d6ebbc0d1020b4804f989835462cd1d9fb6f287b40f811195110602727688eed";
	req1.open('GET', "http://www.virustotal.com/vtapi/v2/domain/report" + parametersDomain, false);
	req1.send(null);
	//console.log(req1.responseText);
	if(req1.readyState == 4 && req1.status == 200) {
		var vtDomainResponse = JSON.parse(req1.responseText);
		console.log(vtDomainResponse);
		if (vtDomainResponse.response_code == 1) {
			//var perma1 = document.createElement('a');
			//perma1.setAttribute("href", "https://www.virustotal.com/en/domain/" + url + "/information/");
			//perma1.setAttribute("target", "_blank");
			//perma1.innerText = "https://www.virustotal.com/en/domain/" + url + "/information/"
			//document.getElementById('domain').innerHTML = url;
			//document.getElementById("vtDomainPermalink").appendChild(perma1);
			
			//Whois lookup
			try {
				if (vtDomainResponse.whois == null || vtDomainResponse.whois == undefined) {
					document.getElementById('vtDomainWhois').style.display = "none";
					document.getElementById('navWhois').style.display = "none";
					document.getElementById('Whois').style.display = "none";
					$('#navVT').addClass("active");
				} else {
					$('#navWhois').addClass("active");
					var whoisPane = document.createElement('fieldset');
					var legend = document.createElement('legend');
					var p = document.createElement('p');
					p.setAttribute('style', 'max-height: 310px; overflow-x: hidden; overflow-y: scroll');
                    var pre = document.createElement('pre');
		            pre.setAttribute('style', 'border:1px black');
					//var forWhois = vtDomainResponse.whois;
					//forWhois = forWhois.find('whois_timestamp');
					//console.log("whois: ", forWhois);
					
					p.innerText = vtDomainResponse.whois;
					legend.innerText = "Whois Lookup";
					whoisPane.appendChild(legend);
					pre.appendChild(p);
                    whoisPane.appendChild(pre);
					document.getElementById('vtDomainWhois').appendChild(whoisPane);
				}	
			}
			
			catch (err) {
				console.log("Error (Whois): ", err);
				document.getElementById('vtDomainWhois').style.display = "none";
				document.getElementById('navWhois').style.display = "none";
				document.getElementById('Whois').style.display = "none";
			}
			
			
			//subdomains
			try {
				if (vtDomainResponse.subdomains != null) {
					var sdPane = document.createElement('fieldset');
					var sdL = document.createElement('legend');
					var sdUl = document.createElement('ul');
					sdUl.setAttribute('style','list-style: none');
                    var pre = document.createElement('pre');
		            pre.setAttribute('style', 'border:1px black');
                    
					for (i in vtDomainResponse.subdomains) {
						var sdLi = document.createElement('li');
						sdLi.innerText += vtDomainResponse.subdomains[i];
						sdUl.appendChild(sdLi);
					}
					sdL.innerText = "Observed subdomains";
					sdPane.appendChild(sdL);
					pre.appendChild(sdUl);
                    sdPane.appendChild(pre);
					document.getElementById('vtDomainSubdomains').appendChild(sdPane);
				} else
					//domain-siblings
					if ((vtDomainResponse.domain_siblings != null || vtDomainResponse.domain_siblings != undefined) && vtDomainResponse.domain_siblings.length != 0 ) {
						var sdPane = document.createElement('fieldset');
						var sdL = document.createElement('legend');
						var sdUl = document.createElement('ul');
						sdUl.setAttribute('style','list-style: none');
						for (i in vtDomainResponse.domain_siblings) {
							var sdLi = document.createElement('li');
							sdLi.innerText += vtDomainResponse.domain_siblings[i];
							sdUl.appendChild(sdLi);
						}
						sdL.innerText = "Observed subdomains";
						sdPane.appendChild(sdL);
						sdPane.appendChild(sdUl);
						document.getElementById('vtDomainSubdomains').appendChild(sdPane);
					} else {
						document.getElementById('navSD').style.display = "none";
						document.getElementById('subdomains').style.display = "none";
						//$('#navVT').addClass("active");
					}
			}
			
			catch (err) {
				console.log("Error (Subdomains): ", err);
			}
			
			//IP Address Resolution
			try {
				if ((vtDomainResponse.resolutions != null || vtDomainResponse.resolutions != undefined) && vtDomainResponse.resolutions.length != 0) {
					var ipPane = document.createElement('fieldset');
					var ipL = document.createElement('legend');
					var ipP = document.createElement('p');
					var ipTab = document.createElement('table');
					ipTab.setAttribute("class","table table-striped");
					var ipTh = document.createElement('thead');
					var ipTr0 = document.createElement('tr');
					var ipTh1 = document.createElement('th');
					var ipTh2 = document.createElement('th');
					ipTh1.innerText = "Resolved Date";
					ipTh2.innerText = "IP Address";
					ipTr0.appendChild(ipTh1);
					ipTr0.appendChild(ipTh2);
					ipTh.appendChild(ipTr0);
					ipTab.appendChild(ipTh);
					var ipTb = document.createElement('tbody');
					for (i in vtDomainResponse.resolutions) {
						var arrIPs = {};
						arrIPs = vtDomainResponse.resolutions[i];
						var ipTr1 = document.createElement('tr');
						var ipTd1 = document.createElement('td');
						var ipTd2 = document.createElement('td');
						ipTd2.setAttribute('style','white-space:nowrap');
						ipTd1.innerText = (arrIPs.last_resolved).split(" ", 1);
						ipTd2.innerText = arrIPs.ip_address;
						ipTr1.appendChild(ipTd1);
						ipTr1.appendChild(ipTd2);
						ipTb.appendChild(ipTr1);
					}
					ipL.innerText = "Historical IP Address Resolution";
					ipPane.appendChild(ipL);
					ipTab.appendChild(ipTb);
					ipPane.appendChild(ipTab);
					document.getElementById('vtIPs').appendChild(ipPane);
				} else {
					document.getElementById('navIPres').style.display = "none";
					document.getElementById('ip-address').style.display = "none";
				}
			}
			catch (err) {
				console.log("Error (IP Address Resolution): ", err);
			}
			
			//website category
			try {
				if (('Alexa category' || 'BitDefender category' || 'TrendMicro category' || 'Websense ThreatSeeker category' || 'Dr.Web category') in vtDomainResponse) {
					var catPane = document.createElement('fieldset');
					var catL = document.createElement('legend');
					var catTab = document.createElement('table');
					catTab.setAttribute("class","table table-striped");
					var catTb = document.createElement('tbody');
					var catList = ['Alexa category', 'BitDefender category', 'TrendMicro category', 'Websense ThreatSeeker category', 'Dr.Web category'];
					//console.log(catList);
					for (i in catList) {
						if (catList[i] in vtDomainResponse) {
							var catTr0 = document.createElement('tr');
							var catTd0 = document.createElement('td');
							var catTd1 = document.createElement('td');
							catTd0.innerText = catList[i].split(" ",1);
							var iCat = catList[i];
							catTd1.innerText = vtDomainResponse[iCat];
							catTr0.appendChild(catTd0);
							catTr0.appendChild(catTd1);
							catTb.appendChild(catTr0);	
						}
					}
					catL.innerText = "Website Category";
					catPane.appendChild(catL);
					catTab.appendChild(catTb);
					catPane.appendChild(catTab);
					document.getElementById('vtCategory').appendChild(catPane);
				} else {
					document.getElementById('navCAT').style.display = "none";
					document.getElementById('domain-category').style.display = "none";
					//$('#navVT').addClass("active");
				}	
			}
			
			catch (err) {
				console.log("Error (Category): ", err);
			}
			
			//detected-urls
			try {
				if ((vtDomainResponse.detected_urls != null || vtDomainResponse.detected_urls != undefined) && vtDomainResponse.detected_urls.length != 0) {
					var dUrlsPane = document.createElement('fieldset');
					var dUrlsL = document.createElement('legend');
					var dUrlsP = document.createElement('p');
					var dUrlsTab = document.createElement('table');
					dUrlsTab.setAttribute("class","table table-striped");
					var dUrlsTh = document.createElement('thead');
					var dUrlsTr0 = document.createElement('tr');
					var dUrlsTh1 = document.createElement('th');
					var dUrlsTh2 = document.createElement('th');
					var dUrlsTh3 = document.createElement('th');
					dUrlsTh1.innerText = "Detection";
					dUrlsTh2.innerText = "Scan date";
					dUrlsTh3.innerText = "Flagged URL";
					dUrlsTr0.appendChild(dUrlsTh1);
					dUrlsTr0.appendChild(dUrlsTh2);
					dUrlsTr0.appendChild(dUrlsTh3);
					dUrlsTh.appendChild(dUrlsTr0);
					dUrlsTab.appendChild(dUrlsTh);
					var dUrlsTb = document.createElement('tbody');
					for (i in vtDomainResponse.detected_urls) {
						var arrURLs = {};
						arrURLs = vtDomainResponse.detected_urls[i];
						var dUrlsTr1 = document.createElement('tr');
						var dUrlsTd1 = document.createElement('td');
						var dUrlsTd2 = document.createElement('td');
						var dUrlsTd3 = document.createElement('td');
						dUrlsTd2.setAttribute('style','white-space:nowrap');
//						dUrlsTd3.setAttribute('style','text-overflow:ellipsis;overflow:hidden;white-space:nowrap;');
                        dUrlsTd3.setAttribute('style',"word-break: break-all;");
                        dUrlsTd3.setAttribute("data-toggle","tooltip");
                        dUrlsTd3.setAttribute("title", arrURLs.url);
						dUrlsTd1.innerText = arrURLs.positives + "/" + arrURLs.total;
						dUrlsTd2.innerText = arrURLs.scan_date;
						dUrlsTd3.innerText = arrURLs.url;
						dUrlsTr1.appendChild(dUrlsTd1);
						dUrlsTr1.appendChild(dUrlsTd2);
						dUrlsTr1.appendChild(dUrlsTd3);
						dUrlsTb.appendChild(dUrlsTr1);
					}
					dUrlsPane.appendChild(dUrlsL);
					dUrlsPane.appendChild(dUrlsP);
					dUrlsTab.appendChild(dUrlsTb);
					dUrlsPane.appendChild(dUrlsTab);
					dUrlsL.innerText = "Flagged URLs";
					dUrlsP.innerText = "Latest URLs hosted in this domain detected by at least one URL scanner or malicious URL dataset.";
					document.getElementById('vtFlaggedURLs').appendChild(dUrlsPane);
				} else {
					document.getElementById('navFlaggedUrl').style.display = "none";
					document.getElementById('flagged-url').style.display = "none";
					//$('#navVT').addClass("active");
				}
			}
			
			catch (err) {
				console.log("Error (Flagged URLs): ", err);
			}
			
			
			/* IP Address
			console.log(vtDomainResponse.resolutions[2]);
			if (vtDomainResponse.resolutions != null) {
				var IPAddr, resol = "";
				for (items in vtDomainResponse.resolutions) {
					resol = vtDomainResponse.resolutions[items];
					for (i in resol)
						console.log(resol[i]);
						IPAddr += resol[i];
				}
				document.getElementById('vtDomainResolutions').innerHTML = IPAddr;
			}
			*/
			
		} else {
			document.getElementById('vtDomainWhois').style.display = "none";
			document.getElementById('navWhois').style.display = "none";
			document.getElementById('Whois').style.display = "none";
			document.getElementById('vtDomainSubdomains').style.display = "none";
			document.getElementById('navSD').style.display = "none";
			document.getElementById('subdomains').style.display = "none";
			$('navVT').attr("class","active");
		}
	}
}

/**
* getUrlVars
*
*/
function getUrlVars() {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
 
    for(var i = 0; i < hashes.length; i++)
    {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
 
    return vars;
}

/**
* Call Functions
*
*/
function startScanners (url) {
	var getLatestReport = [];
	getLatestReport = vt(url);
	//console.log(getLatestReport);
	//console.log(getLatestReport[1]);
    revIP(url);
    dnsLookup(url);
    reverseDNS(url);
    vtURLReport(url, getLatestReport[0], getLatestReport[1]);
    vtDomainReport(url);
    httpHeaders(url);
    gsb(url);
    mcafee(url);
	norton(url);
	avg(url);
	//trendMicroSSC(url);
    wot(url);
    extractURLs(url);
    screenshot(url);
    webcache(url);
    fortiguard(url);
    urlvoid(url);
	
//    phishtank(url);
//	vtFileScan();

	$('#inputPane').hide();
    $('#adHolder').hide();
	$('#scanResultWindow').show();
	document.getElementById('container').style.cursor = 'auto';
}

//window.onload = function () {
	
	$(document).ready(function () {
		
        //jump to page path #fileLookup
        if (getUrlParameter('go') == 'fileLookup') {
            try {
                ga('send', 'event', 'getUrlParameter', 'click', 'fileLookup', {transport: 'beacon'});    
            }
            
            catch (err) {
				console.log("getUrlParameter(fileLookup): ", err);
            }
            $('#urlId').removeClass('active');
            $('#urlId a').attr('aria-expanded','false');
            $('#whoisId').removeClass('active');
            $('#whoisId a').attr('aria-expanded','false');
            $('#revIPId').removeClass('active');
            $('#revIPId a').attr('aria-expanded','false');
            $('#httpId').removeClass('active');
            $('#httpId a').attr('aria-expanded','false');
            $('#extractedId').removeClass('active');
            $('#extractedId a').attr('aria-expanded','false');
            $('#sslId').removeClass('active');
            $('#sslId a').attr('aria-expanded','false');
            
            $('#fileId').addClass('active');
            $('#fileId a').attr('aria-expanded','true');
            
            $('#urlLookup').attr('class','tab-pane fade');
            $('#whoisLookup').attr('class','tab-pane fade');
            $('#reverseIPlookup').attr('class','tab-pane fade');
            $('#httpHeadersLookup').attr('class','tab-pane fade');
            $('#extractedPageLinks').attr('class','tab-pane fade');
            $('#sslChecker').attr('class','tab-pane fade');
            $('#fileLookup').attr('class','tab-pane fade active in');
        }
        
        //jump to page path #whoisLookup
        if (getUrlParameter('go') == 'whois') {
            try {
                ga('send', 'event', 'getUrlParameter', 'click', 'Whois Lookup', {transport: 'beacon'});    
            }
            
            catch (err) {
				console.log("getUrlParameter(whoisLookup): ", err);
            }
            $('#urlId').removeClass('active');
            $('#urlId a').attr('aria-expanded','false');
            $('#fileId').removeClass('active');
            $('#fileId a').attr('aria-expanded','false');
            $('#revIPId').removeClass('active');
            $('#revIPId a').attr('aria-expanded','false');
            $('#httpId').removeClass('active');
            $('#httpId a').attr('aria-expanded','false');
            $('#extractedId').removeClass('active');
            $('#extractedId a').attr('aria-expanded','false');
            $('#sslId').removeClass('active');
            $('#sslId a').attr('aria-expanded','false');
            
            $('#whoisId').addClass('active');
            $('#whoisId a').attr('aria-expanded','true');
            
            $('#urlLookup').attr('class','tab-pane fade');
            $('#fileLookup').attr('class','tab-pane fade');
            $('#reverseIPlookup').attr('class','tab-pane fade');
            $('#httpHeadersLookup').attr('class','tab-pane fade');
            $('#extractedPageLinks').attr('class','tab-pane fade');
            $('#sslChecker').attr('class','tab-pane fade');
            $('#whoisLookup').attr('class','tab-pane fade active in');
        }
        
        //jump to page path #reverseIPLookup
        if (getUrlParameter('go') == 'reverseIP') {
            try {
                ga('send', 'event', 'getUrlParameter', 'click', 'Reverse IP Lookup', {transport: 'beacon'});    
            }
            
            catch (err) {
				console.log("getUrlParameter(whoisLookup): ", err);
            }
            $('#urlId').removeClass('active');
            $('#urlId a').attr('aria-expanded','false');
            $('#fileId').removeClass('active');
            $('#fileId a').attr('aria-expanded','false');
            $('#whoisId').removeClass('active');
            $('#whoisId a').attr('aria-expanded','false');
            $('#httpId').removeClass('active');
            $('#httpId a').attr('aria-expanded','false');
            $('#extractedId').removeClass('active');
            $('#extractedId a').attr('aria-expanded','false');
            $('#sslId').removeClass('active');
            $('#sslId a').attr('aria-expanded','false');
            
            $('#revIPId').addClass('active');
            $('#revIPId a').attr('aria-expanded','true');
            
            $('#urlLookup').attr('class','tab-pane fade');
            $('#fileLookup').attr('class','tab-pane fade');
            $('#whoisLookup').attr('class','tab-pane fade');
            $('#httpHeadersLookup').attr('class','tab-pane fade');
            $('#extractedPageLinks').attr('class','tab-pane fade');
            $('#sslChecker').attr('class','tab-pane fade');
            $('#reverseIPlookup').attr('class','tab-pane fade active in');
        }
        
        //jump to page path #sslChecker
        if (getUrlParameter('go') == 'sslChecker') {
            try {
                ga('send', 'event', 'getUrlParameter', 'click', 'sslChecker', {transport: 'beacon'});    
            }
            
            catch (err) {
				console.log("getUrlParameter(sslChecker): ", err);
            }
            $('#urlId').removeClass('active');
            $('#urlId a').attr('aria-expanded','false');
            $('#fileId').removeClass('active');
            $('#fileId a').attr('aria-expanded','false');
            $('#whoisId').removeClass('active');
            $('#whoisId a').attr('aria-expanded','false');
            $('#httpId').removeClass('active');
            $('#httpId a').attr('aria-expanded','false');
            $('#extractedId').removeClass('active');
            $('#extractedId a').attr('aria-expanded','false');
            $('#revIPId').removeClass('active');
            $('#revIPId a').attr('aria-expanded','false');
            
            $('#sslId').addClass('active');
            $('#sslId a').attr('aria-expanded','true');
            
            $('#urlLookup').attr('class','tab-pane fade');
            $('#fileLookup').attr('class','tab-pane fade');
            $('#whoisLookup').attr('class','tab-pane fade');
            $('#httpHeadersLookup').attr('class','tab-pane fade');
            $('#extractedPageLinks').attr('class','tab-pane fade');
            $('#reverseIPlookup').attr('class','tab-pane fade');
            $('#sslChecker').attr('class','tab-pane fade active in');
        }
        
        //wait class for Ajax calls
//        $(document).ajaxStart(function () { $('*').addClass("wait"); });
//        $(document).ajaxStop(function () { $('*').removeClass("wait"); });
        
        try {
            var url = getUrlParameter('url');
            if (url === undefined || url === "") {
                console.log("thisURL: ", url);    
            } else {
                try {
                    ga('send', 'event', 'URL Scan', 'sumbit', 'URL scan: Submitted through contextMenu or AddressBar', {transport: 'beacon'});
                }
                catch (err) {
                    console.log("getUrlParameter(URL Scan): ", err);
                }
                $('#urlLookup .info').empty();
                $('#urlLookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                $('#url-input').attr('placeholder', url);
                $('#url-input').prop('disabled',true);
                $('#url-input').css('cursor','not-allowed');
                $('#url-submit').text("Scanning..");
                $('#url-submit').prop("disabled", true);
                $('#url-submit').css('cursor','wait');
                $('#inputPane').css('cursor','wait');
//                $('#fileScanBtn').prop("disabled", true);
//                $('#fileScanBtn').css('cursor','not-allowed');
                console.log("thisURL: ", url);
                
                //rev IP lookup
//                try {
//                    $('#navRIP').click(function () {
//                        if (document.getElementById('revIPfound') == null) {
//                            revIP(url); //call reverse-ip function
//                        }
//                    });
//                }
//                
//                catch (err) {
//                    console.log("RevIP Call: ", err);
//                }
                
                try {
                    //URLVoid latest report
                    var reqV = new XMLHttpRequest();
                    reqV.open('GET', 'http://www.urlvoid.com/update-report/' + url, true);
                    reqV.send(null);    
                }
                
                catch (err) {
                    console.log("URLVoid latest report Call: ", err);
                }
                
                setTimeout(function(){ 
                    startScanners(url);
                }, 1000);
            }
        }
        
        catch(err) {
            console.log("ContextMenu Call: ", err);
        }
        
//		$.getJSON("http://api.screenshots.com/v1/google.com/history/", function (json) {
//			console.log(json);
//		});
//		$.getJSON("http://www.siteadvisor.com/sites/facebook.com", function (json) {
//			console.log(json);
//		});
		
//		$('#file-pane').hide();
		
		//file scan button to hide URL scan window
//		$('#fileScanBtn').click(function () {
//			$('#search-url').hide();
//			$('#scanResultWindow').hide();
//			$('#file-pane').show();
//			//$('#file-submit').prop("disabled", true);
//		});
		
		//url scan button to hide file scan window
//		$('#urlScanBtn').click(function () {
//			$('#file-pane').hide();
//			$('#scanResultWindow').hide();
//			$('#search-url').show();
//			//$('#file-submit').prop("disabled", true);
//		});
		
		//var arrayOfURLs = [];
		var lines = 1;
		var linesUsed = $('#linesUsed');
		
//		$('#url-input').blur(function () {
//			if ( $(this).val()) {
//				$('#fileScanBtn').prop("disabled", true);
//			} else {
//				$('#fileScanBtn').prop("disabled", false);
//			}
//		});
		
//		$('#fileHash-input').blur(function () {
//			if ( $(this).val()) {
//				$('#urlScanBtn').prop("disabled", true);
//			} else {
//				$('#urlScanBtn').prop("disabled", false);
//			}
//		});
		
        //multiple line input (for future enhancement)
//		$('#url-input').keydown(function(e) {
//			$('#fileScanBtn').prop("disabled", true);
//			document.getElementById('max-urls').style.display = 'none';
//			document.getElementById('url-submit').disabled = false;
//			document.getElementById('url-submit').style.cursor = 'pointer';
//			newLines = $(this).val().split("\n").length;
//			linesUsed.text(newLines);
//			//console.log(linesUsed);
//
//			if(e.keyCode == 13 && newLines >= lines) {
//				linesUsed.css('color', 'red');
//				linesUsed.append(" (Limit reached)");
//				return false;
//			}
//			else {
//				linesUsed.css('color', '');
//			}
//		});
		
	
		var hashLines = 4;
		var hashLinesUsed = $('#hashLinesUsed');
		
		$('#fileHash-input').keydown(function(f) {
//			$('#urlScanBtn').prop("disabled", true);
			$('#max-info').hide();
			document.getElementById('max-hashes').innerHTML = "Hash: ";
			//document.getElementById('max-hashes').style.display = 'none';
//			$('#file-submit').prop("disabled", false);
			
			document.getElementById('file-submit').style.cursor = 'pointer';
			newLinesHash = $(this).val().split("\n").length;
			hashLinesUsed.text(newLinesHash);
			//console.log(linesUsed);

			if(f.keyCode == 13 && newLinesHash >= hashLines) {
				hashLinesUsed.css('color', 'red');
				hashLinesUsed.append(" (Limit reached)");
				return false;
			}
			else {
				hashLinesUsed.css('color', '');
			}
		});
		
	$('#file-submit').click(function () {
		var arrayOfHashes = $('#fileHash-input').val().split('\n');
		//console.log(arrayOfHashes);
		var fileHashes = "";
		if (arrayOfHashes.length <= 4) {
			//console.log("Valid input? Hashes: ");
			
			for (i = 0; i < arrayOfHashes.length; i++) {
				if (i == 0) {
					fileHashes = arrayOfHashes[i]; 
				} else {
					fileHashes += "\," + arrayOfHashes[i];	
				}
			}
			console.log("fileHashes :", fileHashes);
			console.log(arrayOfHashes.length);
			if (arrayOfHashes.length != 0 && $('#fileHash-input').val() != "") {
				try {
					ga('send', 'event', 'File Scan', 'sumbit', 'File hash search submitted', {transport: 'beacon'});
					$('#fileHash-input').prop('disabled',true);
					$('#fileHash-input').css('cursor','not-allowed');
					$('#file-submit').text("Scanning..");
					$('#file-submit').prop("disabled", true);
					$('#inputPane').css('cursor','wait');
					
                    $('#fileLookup .info').empty();
                    $('#fileLookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                    
                    setTimeout(function() {
                        vtFileReport(fileHashes);
                    },1000);
				}
				
				catch (err) {
					console.log("Error(FileScan): ", err);
				}
				
			} else {
				$("#fileModal").modal("show");
			}
		} else {
			//alert("You've exceeded the allowed limit of 4 file hashes search at a time!");
		}
	});
		
        $('#searchBox').keypress(function(e) {
            if(e.which == 13) {
                var keyword = $(this).val();
                console.log(keyword);
//                https://www.google.com/#q=site:
                if (keyword == "" || keyword == undefined) {
                    //empty
                    $("#urlModal").modal("show");
                } else {
                    try {
                        ga('send', 'event', 'Google Search', 'sumbit', 'Google search: press enter', {transport: 'beacon'});
                    }

                    catch (err) {
                        console.log("Google Search: ", err);
                    }
                    
                    var searchURL = "https://www.google.com/#q=malware%2B" + keyword;
                    window.open(searchURL, '_blank');
                }
            }
        });
            
        $('#url-input').keypress(function(e) {
            if(e.which == 13) {
                var url = "";
                var arrayOfURLs = $('#url-input').val().split('\n');
                console.log(arrayOfURLs.length);
                if (arrayOfURLs.length == 1) {
                    var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                    var validateURL = urlregex.test(arrayOfURLs[0]);
                    console.log("Valid input? ", validateURL);
                    if (validateURL == true) {
                        try {
                            ga('send', 'event', 'URL Scan', 'sumbit', 'URL scan: press enter', {transport: 'beacon'});
                        }

                        catch (err) {
                            console.log("URL Scan: ", err);
                        }

                        $('#urlLookup .info').empty();
                        $('#urlLookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                        $('#url-input').prop('disabled',true);
                        $('#url-input').css('cursor','not-allowed');
                        
                        $('#url-submit').text("Scanning..");
                        $('#url-submit').prop("disabled", true);
        //				$('#loading').show();
        //				$('#loading').addClass("active");
                        $('#url-submit').css('cursor','wait');
                        $('#inputPane').css('cursor','wait');

                        url = arrayOfURLs[0].replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                        //console.log("domain: ", url);

                        // rev IP lookup
//                        try {
//                            $('#navRIP').click(function () {
//                                if (document.getElementById('revIPfound') == null) {
//                                    revIP(url); //call reverse-ip function
//                                }	
//                            });
//                        }
//
//                        catch (err) {
//                            console.log("RevIP Call: ", err);
//                        }
                        
                        //URLVoid latest report
                        var reqV = new XMLHttpRequest();
                        reqV.open('GET', 'http://www.urlvoid.com/update-report/' + url, true);
                        reqV.send(null);

                        setTimeout(function(){
                            startScanners(url);
                        }, 1000);
                    } else {
                        $("#urlModal").modal("show");
                        $('#url-input').val('');
                    }
                } else {
                    for (i = 0; i < arrayOfURLs.length; i++) {
                        url += arrayOfURLs[i].replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0] + "\\n";
                    }
                    alert("You've exceeded the allowed limit of 1 URL scan at a time!");
                }
            }
//            $('*').toggleClass('wait');
        });
		
		
	    $('#url-submit').click(function () {
//		$('*').toggleClass('wait');
		var arrayOfURLs = $('#url-input').val().split('\n');
//		console.log(arrayOfURLs, arrayOfURLs.length);
		var url = "";
		//url += "\n" + url.split('.').pop();
		
		if (arrayOfURLs.length == 1) {
			var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
  			var validateURL = urlregex.test(arrayOfURLs[0]);
			console.log("Valid input? ", validateURL);
			if (validateURL == true) {
				try {
					ga('send', 'event', 'URL Scan', 'sumbit', 'URL scan: sumbit button', {transport: 'beacon'});
				}
				
				catch (err) {
					console.log("URL Scan: ", err);
				}
				
				$('#urlLookup .info').empty();
                $('#urlLookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
				$('#url-input').prop('disabled',true);
				$('#url-input').css('cursor','not-allowed');
				this.innerHTML = "Scanning..";
				this.disabled = true;
//				$('#loading').show();
//				$('#loading').addClass("active");
				$('#url-submit').css('cursor','wait');
				
				url = arrayOfURLs[0].replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
				//console.log("domain: ", url);
				
                //rev IP lookup
//				try {
//					$('#navRIP').click(function () {
//						if (document.getElementById('revIPfound') == null) {
//							revIP(url); //call reverse-ip function
//						}	
//					});
//				}
//				
//				catch (err) {
//					console.log("RevIP Call: ", err);
//				}
                
                try {
                    //URLVoid latest report
                    var reqV = new XMLHttpRequest();
                    reqV.open('GET', 'http://www.urlvoid.com/update-report/' + url, true);
                    reqV.send(null);    
                }
                
                catch (err) {
					console.log("URLVoid Latest report Call: ", err);
				}
                
				setTimeout(function(){ 
					startScanners(url);
				}, 1000);
			} else {
				//alert("Enter a valid URL/DomainName/Subdomain. For example: http://example.com or example.com or subdomain.example.com");
				$("#urlModal").modal("show");
                $('#url-input').val('');
			}
			
			
			
		} else {
			for (i = 0; i < arrayOfURLs.length; i++) {
				url += arrayOfURLs[i].replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0] + "\\n";
			}
			alert("You've exceeded the allowed limit of 1 URL scan at a time!");
		}
//		$('#inputPane').hide();
//		$("#loading").hide();
//		
		//$('#scanResultWindow').show();
		//document.getElementById('container').style.cursor = 'auto';
//		$('*').toggleClass('wait');
	});
        
        //ssl check
        $('#sslURLsubmit').click(function () {
            var url = "";
            var getURL = $('#sslURLinput').val();
            if (getURL != undefined || getURL != "") {
                var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                var validateURL = urlregex.test(getURL);
                console.log("Valid input? ", validateURL);
            }
            
            if (validateURL == true) {
				try {
					ga('send', 'event', 'SSL Check', 'sumbit', 'SSL check: submit button', {transport: 'beacon'});
				}
				
				catch (err) {
					console.log("SSL Check: ", err);
				}
                
                $("#sslTable").empty();
                $('#sslChecker .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                $('#sslURLinput').prop('disabled',true);
                $('#sslURLsubmit').text("Checking..");
                $('#sslURLsubmit').prop('disabled',true);
				
				url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                
                sslChecker(url);
            } else {
				$("#urlModal").modal("show");
                $('#sslURLinput').val('');
                $('#sslURLsubmit').disabled = false;
			}
        });
        
        $('#sslURLinput').keypress(function(e) {
            if(e.which == 13) {
                var url = "";
                var getURL = $('#sslURLinput').val();
                if (getURL != undefined || getURL != "") {
                    var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                    var validateURL = urlregex.test(getURL);
                    console.log("Valid input? ", validateURL);
                }
                
                if (validateURL == true) {
                    try {
                        ga('send', 'event', 'SSL Check', 'sumbit', 'SSL check: press enter', {transport: 'beacon'});
                    }

                    catch (err) {
                        console.log("SSL Check: ", err);
                    }
                    
                    $("#sslTable").empty();
                    $('#sslChecker .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                    $('#sslURLinput').prop('disabled',true);
                    $('#sslURLsubmit').text("Checking..");
                    $('#sslURLsubmit').prop('disabled',true);

                    url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                    
                    sslChecker(url);
                } else {
                    $("#urlModal").modal("show");
                    $('#sslURLinput').val('');
                    $('#sslURLsubmit').disabled = false;
                }
            }
        });
        
        //whois lookup
        $('#whoisSubmit').click(function () {
            var url = "";
            var getURL = $('#whoisInput').val();
            if (getURL != undefined || getURL != "") {
                var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                var validateURL = urlregex.test(getURL);
                console.log("Valid input? ", validateURL);
            }
            
            if (validateURL == true) {
				try {
					ga('send', 'event', 'Whois Lookup', 'sumbit', 'Whois Lookup: submit button', {transport: 'beacon'});
				}
				
				catch (err) {
					console.log("Whois Lookup: ", err);
				}
                
                $("#whoisPre").empty();
                $('#whoisLookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                $('#whoisInput').prop('disabled',true);
                $('#whoisSubmit').text("Checking..");
                $('#whoisSubmit').prop('disabled',true);
				
				url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                
                whois(url);
            } else {
				$("#urlModal").modal("show");
                $('#whoisInput').val('');
                $('#whoisSubmit').disabled = false;
			}
        });
        
        $('#whoisInput').keypress(function(e) {
            if(e.which == 13) {
                var url = "";
                var getURL = $('#whoisInput').val();
                if (getURL != undefined || getURL != "") {
                    var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                    var validateURL = urlregex.test(getURL);
                    console.log("Valid input? ", validateURL);
                }
                
                if (validateURL == true) {
                    try {
                        ga('send', 'event', 'Whois Lookup', 'sumbit', 'Whois Lookup: press enter', {transport: 'beacon'});
                    }

                    catch (err) {
                        console.log("Whois Lookup: ", err);
                    }
                    
                    $("#whoisPre").empty();
                    $('#whoisLookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                    $('#whoisInput').prop('disabled',true);
                    $('#whoisSubmit').text("Looking up..");
                    $('#whoisSubmit').prop('disabled',true);

                    url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                    
                    whois(url);
                } else {
                    $("#urlModal").modal("show");
                    $('#whoisInput').val('');
                    $('#whoisSubmit').disabled = false;
                }
            }
        });
        
        //reverse ip lookup
        $('#revIPsubmit').click(function () {
            var url = "";
            var getURL = $('#revIPinput').val();
            if (getURL != undefined || getURL != "") {
                var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                var validateURL = urlregex.test(getURL);
            }
            
            if (validateURL == true) {
				try {
					ga('send', 'event', 'Reverse IP Lookup', 'sumbit', 'Reverse IP Lookup: submit button', {transport: 'beacon'});
				}
				
				catch (err) {
					console.log("Reverse IP Lookup: ", err);
				}
                
                $("#revIPpre").empty();
                $('#reverseIPlookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                $('#revIPinput').prop('disabled',true);
                $('#revIPsubmit').text("Looking up..");
                $('#revIPsubmit').prop('disabled',true);
				
				url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                
                revIP(url,'homepage');
            } else {
				$("#urlModal").modal("show");
                $('#revIPinput').val('');
                $('#revIPsubmit').disabled = false;
			}
        });
        
        $('#revIPinput').keypress(function(e) {
            if(e.which == 13) {
                var url = "";
                var getURL = $('#revIPinput').val();
                if (getURL != undefined || getURL != "") {
                    var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                    var validateURL = urlregex.test(getURL);
                }
                
                if (validateURL == true) {
                    try {
                        ga('send', 'event', 'Reverse IP Lookup', 'sumbit', 'Reverse IP Lookup: press enter', {transport: 'beacon'});
                    }

                    catch (err) {
                        console.log("Reverse IP Lookup: ", err);
                    }
                    
                    $("#revIPpre").empty();
                    $('#reverseIPlookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                    $('#revIPinput').prop('disabled',true);
                    $('#revIPsubmit').text("Looking up..");
                    $('#revIPsubmit').prop('disabled',true);

                    url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                    
                    revIP(url,'homepage');
                } else {
                    $("#urlModal").modal("show");
                    $('#revIPinput').val('');
                    $('#revIPsubmit').disabled = false;
                }
            }
        });
        
        //http headers
        $('#httpSubmit').click(function () {
            var url = "";
            var getURL = $('#httpInput').val();
            if (getURL != undefined || getURL != "") {
                var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                var validateURL = urlregex.test(getURL);
            }
            
            if (validateURL == true) {
				try {
					ga('send', 'event', 'HTTP Headers', 'sumbit', 'HTTP Headers: submit button', {transport: 'beacon'});
				}
				
				catch (err) {
					console.log("HTTP Headers: ", err);
				}
                
                $("#httpPre").empty();
                $('#httpHeadersLookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                $('#httpInput').prop('disabled',true);
                $('#httpSubmit').text("Looking up..");
                $('#httpSubmit').prop('disabled',true);
				
				url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                
                httpHeaders(url,'homepage');
            } else {
				$("#urlModal").modal("show");
                $('#httpInput').val('');
                $('#httpSubmit').disabled = false;
			}
        });
        
        $('#httpInput').keypress(function(e) {
            if(e.which == 13) {
                var url = "";
                var getURL = $('#httpInput').val();
                if (getURL != undefined || getURL != "") {
                    var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                    var validateURL = urlregex.test(getURL);
                }
                
                if (validateURL == true) {
                    try {
                        ga('send', 'event', 'HTTP Headers', 'sumbit', 'HTTP Headers: press enter', {transport: 'beacon'});
                    }

                    catch (err) {
                        console.log("HTTP Headers: ", err);
                    }
                    
                    $("#httpPre").empty();
                    $('#httpHeadersLookup .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                    $('#httpInput').prop('disabled',true);
                    $('#httpSubmit').text("Looking up..");
                    $('#httpSubmit').prop('disabled',true);

                    url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                    
                    httpHeaders(url,'homepage');
                } else {
                    $("#urlModal").modal("show");
                    $('#httpInput').val('');
                    $('#httpSubmit').disabled = false;
                }
            }
        });
        
        //extracted URLs
        $('#extractedPageLinksSubmit').click(function () {
            var url = "";
            var getURL = $('#extractedPageLinksInput').val();
            if (getURL != undefined || getURL != "") {
                var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                var validateURL = urlregex.test(getURL);
            }
            
            if (validateURL == true) {
				try {
					ga('send', 'event', 'Extracted URLs', 'sumbit', 'Extracted URLs: submit button', {transport: 'beacon'});
				}
				
				catch (err) {
					console.log("Extracted URLs: ", err);
				}
                
                $("#extractedPageLinksPre").empty();
                $('#extractedPageLinks .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                $('#extractedPageLinksInput').prop('disabled',true);
                $('#extractedPageLinksSubmit').text("Looking up..");
                $('#extractedPageLinksSubmit').prop('disabled',true);
				
				url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                
                extractURLs(url,'homepage');
            } else {
				$("#urlModal").modal("show");
                $('#extractedPageLinksInput').val('');
                $('#extractedPageLinksSubmit').disabled = false;
			}
        });
        
        $('#extractedPageLinksInput').keypress(function(e) {
            if(e.which == 13) {
                var url = "";
                var getURL = $('#extractedPageLinksInput').val();
                if (getURL != undefined || getURL != "") {
                    var urlregex = new RegExp("[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*");
                    var validateURL = urlregex.test(getURL);
                }
                
                if (validateURL == true) {
                    try {
                        ga('send', 'event', 'Extracted URLs', 'sumbit', 'Extracted URLs: press enter', {transport: 'beacon'});
                    }

                    catch (err) {
                        console.log("Extracted URLs: ", err);
                    }
                    
                    $("#extractedPageLinksPre").empty();
                    $('#extractedPageLinks .info').append( "<span class='glyphicon glyphicon-refresh-animate'></span> Please wait..</span>" );
                    $('#extractedPageLinksInput').prop('disabled',true);
                    $('#extractedPageLinksSubmit').text("Looking up..");
                    $('#extractedPageLinksSubmit').prop('disabled',true);

                    url = getURL.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0];
                    
                    extractURLs(url,'homepage');
                } else {
                    $("#urlModal").modal("show");
                    $('#extractedPageLinksInput').val('');
                    $('#extractedPageLinksSubmit').disabled = false;
                }
            }
        });
        
        //New Lookup
        document.getElementById("navNewLookup").onclick = function() {
            try {
                ga('send', 'event', 'NewLookup', 'click', 'onClick - NewLookup', {transport: 'beacon'});    
            }
            
            catch (err) {
				console.log("NewLookup: ", err);
            }
            
            chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
                chrome.tabs.update(tabs[0].id, {url: "../url-scanner.html?utm_source=extension&utm_medium=menu&utm_campaign=new_lookup"});
            });
//            chrome.tabs.getSelected(null, function (tab) {
//                chrome.tabs.reload(tab.id);
//            });
        };
        
        //click to div fix for fixedMenu
        $("#scanResultWindow").on('click','a', function(e){
            var id =  $(this).attr('href');
             $('html, body').animate({         
                 scrollTop: $(id).offset().top-60
             }, 600);
        });
        
//        $(".nav a").on("click", function(){
//           $(".nav").find(".active").removeClass("active");
//           $(this).parent().addClass("active");
//        });
        
        //search google
        $(".form-group .dropdown-menu li a").click(function(){
            var selText = $(this).html();
                //working version - for single button //
               //$('.btn:first-child').html(selText+'<span class="caret"></span>');  

               //working version - for multiple buttons //
            $(this).parents('.input-group-btn').find('.btn-search').html(selText);
        });
        
        //** chrome extension - Ad 
        var baseMargin = 20;
        $('.adAnimate').hover(function() {
            $(this).stop().animate({marginRight: (baseMargin+6)+'px'}, 600);
        },
        function() {
            $(this).stop().animate({marginRight: (baseMargin-6)+'px'}, 600);                 
        });
        
        //tooltip Feedback
        $('[data-toggle="tooltipFeedback"]').hover(function(){
            $('#idFeedback').popover('show');
            setTimeout(function() {
                $('.popover').fadeOut('slow',function() {}); 
            },4000);
        });
        
        //tooltip Version
        $('[data-toggle="tooltipVersion"]').hover(function(){
            $('#idVersion').popover('show');
            setTimeout(function() {
                $('.popover').fadeOut('slow',function() {}); 
            },6000);
        });
		
		// Google Universal Analytics
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','https://ssl.google-analytics.com/analytics.js','ga');

		ga('create', 'UA-74793124-3', 'auto', {'alwaysSendReferrer': true});
		ga('set', 'checkProtocolTask', function(){});
		ga('require', 'displayfeatures');
		ga('send', 'pageview', '/url-scanner.html');
		
	});
